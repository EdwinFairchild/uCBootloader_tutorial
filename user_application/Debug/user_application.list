
user_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a0  080201d0  080201d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08022970  08022970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080229d4  080229d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080229d4  080229d4  000129d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080229dc  080229dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080229dc  080229dc  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080229e0  080229e0  000129e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080229e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  08022a54  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08022a54  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b88b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc8  00000000  00000000  0002b92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0002d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000219bf  00000000  00000000  0002e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af2a  00000000  00000000  0004fd9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8a1b  00000000  00000000  0005acc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001236e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f5c  00000000  00000000  00123738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201d0 <__do_global_dtors_aux>:
 80201d0:	b510      	push	{r4, lr}
 80201d2:	4c05      	ldr	r4, [pc, #20]	; (80201e8 <__do_global_dtors_aux+0x18>)
 80201d4:	7823      	ldrb	r3, [r4, #0]
 80201d6:	b933      	cbnz	r3, 80201e6 <__do_global_dtors_aux+0x16>
 80201d8:	4b04      	ldr	r3, [pc, #16]	; (80201ec <__do_global_dtors_aux+0x1c>)
 80201da:	b113      	cbz	r3, 80201e2 <__do_global_dtors_aux+0x12>
 80201dc:	4804      	ldr	r0, [pc, #16]	; (80201f0 <__do_global_dtors_aux+0x20>)
 80201de:	f3af 8000 	nop.w
 80201e2:	2301      	movs	r3, #1
 80201e4:	7023      	strb	r3, [r4, #0]
 80201e6:	bd10      	pop	{r4, pc}
 80201e8:	20000070 	.word	0x20000070
 80201ec:	00000000 	.word	0x00000000
 80201f0:	08022958 	.word	0x08022958

080201f4 <frame_dummy>:
 80201f4:	b508      	push	{r3, lr}
 80201f6:	4b03      	ldr	r3, [pc, #12]	; (8020204 <frame_dummy+0x10>)
 80201f8:	b11b      	cbz	r3, 8020202 <frame_dummy+0xe>
 80201fa:	4903      	ldr	r1, [pc, #12]	; (8020208 <frame_dummy+0x14>)
 80201fc:	4803      	ldr	r0, [pc, #12]	; (802020c <frame_dummy+0x18>)
 80201fe:	f3af 8000 	nop.w
 8020202:	bd08      	pop	{r3, pc}
 8020204:	00000000 	.word	0x00000000
 8020208:	20000074 	.word	0x20000074
 802020c:	08022958 	.word	0x08022958

08020210 <strlen>:
 8020210:	4603      	mov	r3, r0
 8020212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020216:	2a00      	cmp	r2, #0
 8020218:	d1fb      	bne.n	8020212 <strlen+0x2>
 802021a:	1a18      	subs	r0, r3, r0
 802021c:	3801      	subs	r0, #1
 802021e:	4770      	bx	lr

08020220 <memchr>:
 8020220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020224:	2a10      	cmp	r2, #16
 8020226:	db2b      	blt.n	8020280 <memchr+0x60>
 8020228:	f010 0f07 	tst.w	r0, #7
 802022c:	d008      	beq.n	8020240 <memchr+0x20>
 802022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020232:	3a01      	subs	r2, #1
 8020234:	428b      	cmp	r3, r1
 8020236:	d02d      	beq.n	8020294 <memchr+0x74>
 8020238:	f010 0f07 	tst.w	r0, #7
 802023c:	b342      	cbz	r2, 8020290 <memchr+0x70>
 802023e:	d1f6      	bne.n	802022e <memchr+0xe>
 8020240:	b4f0      	push	{r4, r5, r6, r7}
 8020242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802024a:	f022 0407 	bic.w	r4, r2, #7
 802024e:	f07f 0700 	mvns.w	r7, #0
 8020252:	2300      	movs	r3, #0
 8020254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020258:	3c08      	subs	r4, #8
 802025a:	ea85 0501 	eor.w	r5, r5, r1
 802025e:	ea86 0601 	eor.w	r6, r6, r1
 8020262:	fa85 f547 	uadd8	r5, r5, r7
 8020266:	faa3 f587 	sel	r5, r3, r7
 802026a:	fa86 f647 	uadd8	r6, r6, r7
 802026e:	faa5 f687 	sel	r6, r5, r7
 8020272:	b98e      	cbnz	r6, 8020298 <memchr+0x78>
 8020274:	d1ee      	bne.n	8020254 <memchr+0x34>
 8020276:	bcf0      	pop	{r4, r5, r6, r7}
 8020278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802027c:	f002 0207 	and.w	r2, r2, #7
 8020280:	b132      	cbz	r2, 8020290 <memchr+0x70>
 8020282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020286:	3a01      	subs	r2, #1
 8020288:	ea83 0301 	eor.w	r3, r3, r1
 802028c:	b113      	cbz	r3, 8020294 <memchr+0x74>
 802028e:	d1f8      	bne.n	8020282 <memchr+0x62>
 8020290:	2000      	movs	r0, #0
 8020292:	4770      	bx	lr
 8020294:	3801      	subs	r0, #1
 8020296:	4770      	bx	lr
 8020298:	2d00      	cmp	r5, #0
 802029a:	bf06      	itte	eq
 802029c:	4635      	moveq	r5, r6
 802029e:	3803      	subeq	r0, #3
 80202a0:	3807      	subne	r0, #7
 80202a2:	f015 0f01 	tst.w	r5, #1
 80202a6:	d107      	bne.n	80202b8 <memchr+0x98>
 80202a8:	3001      	adds	r0, #1
 80202aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80202ae:	bf02      	ittt	eq
 80202b0:	3001      	addeq	r0, #1
 80202b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80202b6:	3001      	addeq	r0, #1
 80202b8:	bcf0      	pop	{r4, r5, r6, r7}
 80202ba:	3801      	subs	r0, #1
 80202bc:	4770      	bx	lr
 80202be:	bf00      	nop

080202c0 <__aeabi_uldivmod>:
 80202c0:	b953      	cbnz	r3, 80202d8 <__aeabi_uldivmod+0x18>
 80202c2:	b94a      	cbnz	r2, 80202d8 <__aeabi_uldivmod+0x18>
 80202c4:	2900      	cmp	r1, #0
 80202c6:	bf08      	it	eq
 80202c8:	2800      	cmpeq	r0, #0
 80202ca:	bf1c      	itt	ne
 80202cc:	f04f 31ff 	movne.w	r1, #4294967295
 80202d0:	f04f 30ff 	movne.w	r0, #4294967295
 80202d4:	f000 b96e 	b.w	80205b4 <__aeabi_idiv0>
 80202d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202e0:	f000 f806 	bl	80202f0 <__udivmoddi4>
 80202e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202ec:	b004      	add	sp, #16
 80202ee:	4770      	bx	lr

080202f0 <__udivmoddi4>:
 80202f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202f4:	9d08      	ldr	r5, [sp, #32]
 80202f6:	4604      	mov	r4, r0
 80202f8:	468c      	mov	ip, r1
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	f040 8083 	bne.w	8020406 <__udivmoddi4+0x116>
 8020300:	428a      	cmp	r2, r1
 8020302:	4617      	mov	r7, r2
 8020304:	d947      	bls.n	8020396 <__udivmoddi4+0xa6>
 8020306:	fab2 f282 	clz	r2, r2
 802030a:	b142      	cbz	r2, 802031e <__udivmoddi4+0x2e>
 802030c:	f1c2 0020 	rsb	r0, r2, #32
 8020310:	fa24 f000 	lsr.w	r0, r4, r0
 8020314:	4091      	lsls	r1, r2
 8020316:	4097      	lsls	r7, r2
 8020318:	ea40 0c01 	orr.w	ip, r0, r1
 802031c:	4094      	lsls	r4, r2
 802031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8020322:	0c23      	lsrs	r3, r4, #16
 8020324:	fbbc f6f8 	udiv	r6, ip, r8
 8020328:	fa1f fe87 	uxth.w	lr, r7
 802032c:	fb08 c116 	mls	r1, r8, r6, ip
 8020330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020334:	fb06 f10e 	mul.w	r1, r6, lr
 8020338:	4299      	cmp	r1, r3
 802033a:	d909      	bls.n	8020350 <__udivmoddi4+0x60>
 802033c:	18fb      	adds	r3, r7, r3
 802033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8020342:	f080 8119 	bcs.w	8020578 <__udivmoddi4+0x288>
 8020346:	4299      	cmp	r1, r3
 8020348:	f240 8116 	bls.w	8020578 <__udivmoddi4+0x288>
 802034c:	3e02      	subs	r6, #2
 802034e:	443b      	add	r3, r7
 8020350:	1a5b      	subs	r3, r3, r1
 8020352:	b2a4      	uxth	r4, r4
 8020354:	fbb3 f0f8 	udiv	r0, r3, r8
 8020358:	fb08 3310 	mls	r3, r8, r0, r3
 802035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020360:	fb00 fe0e 	mul.w	lr, r0, lr
 8020364:	45a6      	cmp	lr, r4
 8020366:	d909      	bls.n	802037c <__udivmoddi4+0x8c>
 8020368:	193c      	adds	r4, r7, r4
 802036a:	f100 33ff 	add.w	r3, r0, #4294967295
 802036e:	f080 8105 	bcs.w	802057c <__udivmoddi4+0x28c>
 8020372:	45a6      	cmp	lr, r4
 8020374:	f240 8102 	bls.w	802057c <__udivmoddi4+0x28c>
 8020378:	3802      	subs	r0, #2
 802037a:	443c      	add	r4, r7
 802037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020380:	eba4 040e 	sub.w	r4, r4, lr
 8020384:	2600      	movs	r6, #0
 8020386:	b11d      	cbz	r5, 8020390 <__udivmoddi4+0xa0>
 8020388:	40d4      	lsrs	r4, r2
 802038a:	2300      	movs	r3, #0
 802038c:	e9c5 4300 	strd	r4, r3, [r5]
 8020390:	4631      	mov	r1, r6
 8020392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020396:	b902      	cbnz	r2, 802039a <__udivmoddi4+0xaa>
 8020398:	deff      	udf	#255	; 0xff
 802039a:	fab2 f282 	clz	r2, r2
 802039e:	2a00      	cmp	r2, #0
 80203a0:	d150      	bne.n	8020444 <__udivmoddi4+0x154>
 80203a2:	1bcb      	subs	r3, r1, r7
 80203a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80203a8:	fa1f f887 	uxth.w	r8, r7
 80203ac:	2601      	movs	r6, #1
 80203ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80203b2:	0c21      	lsrs	r1, r4, #16
 80203b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80203b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80203bc:	fb08 f30c 	mul.w	r3, r8, ip
 80203c0:	428b      	cmp	r3, r1
 80203c2:	d907      	bls.n	80203d4 <__udivmoddi4+0xe4>
 80203c4:	1879      	adds	r1, r7, r1
 80203c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80203ca:	d202      	bcs.n	80203d2 <__udivmoddi4+0xe2>
 80203cc:	428b      	cmp	r3, r1
 80203ce:	f200 80e9 	bhi.w	80205a4 <__udivmoddi4+0x2b4>
 80203d2:	4684      	mov	ip, r0
 80203d4:	1ac9      	subs	r1, r1, r3
 80203d6:	b2a3      	uxth	r3, r4
 80203d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80203dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80203e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80203e4:	fb08 f800 	mul.w	r8, r8, r0
 80203e8:	45a0      	cmp	r8, r4
 80203ea:	d907      	bls.n	80203fc <__udivmoddi4+0x10c>
 80203ec:	193c      	adds	r4, r7, r4
 80203ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80203f2:	d202      	bcs.n	80203fa <__udivmoddi4+0x10a>
 80203f4:	45a0      	cmp	r8, r4
 80203f6:	f200 80d9 	bhi.w	80205ac <__udivmoddi4+0x2bc>
 80203fa:	4618      	mov	r0, r3
 80203fc:	eba4 0408 	sub.w	r4, r4, r8
 8020400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020404:	e7bf      	b.n	8020386 <__udivmoddi4+0x96>
 8020406:	428b      	cmp	r3, r1
 8020408:	d909      	bls.n	802041e <__udivmoddi4+0x12e>
 802040a:	2d00      	cmp	r5, #0
 802040c:	f000 80b1 	beq.w	8020572 <__udivmoddi4+0x282>
 8020410:	2600      	movs	r6, #0
 8020412:	e9c5 0100 	strd	r0, r1, [r5]
 8020416:	4630      	mov	r0, r6
 8020418:	4631      	mov	r1, r6
 802041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802041e:	fab3 f683 	clz	r6, r3
 8020422:	2e00      	cmp	r6, #0
 8020424:	d14a      	bne.n	80204bc <__udivmoddi4+0x1cc>
 8020426:	428b      	cmp	r3, r1
 8020428:	d302      	bcc.n	8020430 <__udivmoddi4+0x140>
 802042a:	4282      	cmp	r2, r0
 802042c:	f200 80b8 	bhi.w	80205a0 <__udivmoddi4+0x2b0>
 8020430:	1a84      	subs	r4, r0, r2
 8020432:	eb61 0103 	sbc.w	r1, r1, r3
 8020436:	2001      	movs	r0, #1
 8020438:	468c      	mov	ip, r1
 802043a:	2d00      	cmp	r5, #0
 802043c:	d0a8      	beq.n	8020390 <__udivmoddi4+0xa0>
 802043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8020442:	e7a5      	b.n	8020390 <__udivmoddi4+0xa0>
 8020444:	f1c2 0320 	rsb	r3, r2, #32
 8020448:	fa20 f603 	lsr.w	r6, r0, r3
 802044c:	4097      	lsls	r7, r2
 802044e:	fa01 f002 	lsl.w	r0, r1, r2
 8020452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020456:	40d9      	lsrs	r1, r3
 8020458:	4330      	orrs	r0, r6
 802045a:	0c03      	lsrs	r3, r0, #16
 802045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8020460:	fa1f f887 	uxth.w	r8, r7
 8020464:	fb0e 1116 	mls	r1, lr, r6, r1
 8020468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802046c:	fb06 f108 	mul.w	r1, r6, r8
 8020470:	4299      	cmp	r1, r3
 8020472:	fa04 f402 	lsl.w	r4, r4, r2
 8020476:	d909      	bls.n	802048c <__udivmoddi4+0x19c>
 8020478:	18fb      	adds	r3, r7, r3
 802047a:	f106 3cff 	add.w	ip, r6, #4294967295
 802047e:	f080 808d 	bcs.w	802059c <__udivmoddi4+0x2ac>
 8020482:	4299      	cmp	r1, r3
 8020484:	f240 808a 	bls.w	802059c <__udivmoddi4+0x2ac>
 8020488:	3e02      	subs	r6, #2
 802048a:	443b      	add	r3, r7
 802048c:	1a5b      	subs	r3, r3, r1
 802048e:	b281      	uxth	r1, r0
 8020490:	fbb3 f0fe 	udiv	r0, r3, lr
 8020494:	fb0e 3310 	mls	r3, lr, r0, r3
 8020498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 802049c:	fb00 f308 	mul.w	r3, r0, r8
 80204a0:	428b      	cmp	r3, r1
 80204a2:	d907      	bls.n	80204b4 <__udivmoddi4+0x1c4>
 80204a4:	1879      	adds	r1, r7, r1
 80204a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80204aa:	d273      	bcs.n	8020594 <__udivmoddi4+0x2a4>
 80204ac:	428b      	cmp	r3, r1
 80204ae:	d971      	bls.n	8020594 <__udivmoddi4+0x2a4>
 80204b0:	3802      	subs	r0, #2
 80204b2:	4439      	add	r1, r7
 80204b4:	1acb      	subs	r3, r1, r3
 80204b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80204ba:	e778      	b.n	80203ae <__udivmoddi4+0xbe>
 80204bc:	f1c6 0c20 	rsb	ip, r6, #32
 80204c0:	fa03 f406 	lsl.w	r4, r3, r6
 80204c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80204c8:	431c      	orrs	r4, r3
 80204ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80204ce:	fa01 f306 	lsl.w	r3, r1, r6
 80204d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80204d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80204da:	431f      	orrs	r7, r3
 80204dc:	0c3b      	lsrs	r3, r7, #16
 80204de:	fbb1 f9fe 	udiv	r9, r1, lr
 80204e2:	fa1f f884 	uxth.w	r8, r4
 80204e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80204ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80204ee:	fb09 fa08 	mul.w	sl, r9, r8
 80204f2:	458a      	cmp	sl, r1
 80204f4:	fa02 f206 	lsl.w	r2, r2, r6
 80204f8:	fa00 f306 	lsl.w	r3, r0, r6
 80204fc:	d908      	bls.n	8020510 <__udivmoddi4+0x220>
 80204fe:	1861      	adds	r1, r4, r1
 8020500:	f109 30ff 	add.w	r0, r9, #4294967295
 8020504:	d248      	bcs.n	8020598 <__udivmoddi4+0x2a8>
 8020506:	458a      	cmp	sl, r1
 8020508:	d946      	bls.n	8020598 <__udivmoddi4+0x2a8>
 802050a:	f1a9 0902 	sub.w	r9, r9, #2
 802050e:	4421      	add	r1, r4
 8020510:	eba1 010a 	sub.w	r1, r1, sl
 8020514:	b2bf      	uxth	r7, r7
 8020516:	fbb1 f0fe 	udiv	r0, r1, lr
 802051a:	fb0e 1110 	mls	r1, lr, r0, r1
 802051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8020522:	fb00 f808 	mul.w	r8, r0, r8
 8020526:	45b8      	cmp	r8, r7
 8020528:	d907      	bls.n	802053a <__udivmoddi4+0x24a>
 802052a:	19e7      	adds	r7, r4, r7
 802052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8020530:	d22e      	bcs.n	8020590 <__udivmoddi4+0x2a0>
 8020532:	45b8      	cmp	r8, r7
 8020534:	d92c      	bls.n	8020590 <__udivmoddi4+0x2a0>
 8020536:	3802      	subs	r0, #2
 8020538:	4427      	add	r7, r4
 802053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 802053e:	eba7 0708 	sub.w	r7, r7, r8
 8020542:	fba0 8902 	umull	r8, r9, r0, r2
 8020546:	454f      	cmp	r7, r9
 8020548:	46c6      	mov	lr, r8
 802054a:	4649      	mov	r1, r9
 802054c:	d31a      	bcc.n	8020584 <__udivmoddi4+0x294>
 802054e:	d017      	beq.n	8020580 <__udivmoddi4+0x290>
 8020550:	b15d      	cbz	r5, 802056a <__udivmoddi4+0x27a>
 8020552:	ebb3 020e 	subs.w	r2, r3, lr
 8020556:	eb67 0701 	sbc.w	r7, r7, r1
 802055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 802055e:	40f2      	lsrs	r2, r6
 8020560:	ea4c 0202 	orr.w	r2, ip, r2
 8020564:	40f7      	lsrs	r7, r6
 8020566:	e9c5 2700 	strd	r2, r7, [r5]
 802056a:	2600      	movs	r6, #0
 802056c:	4631      	mov	r1, r6
 802056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020572:	462e      	mov	r6, r5
 8020574:	4628      	mov	r0, r5
 8020576:	e70b      	b.n	8020390 <__udivmoddi4+0xa0>
 8020578:	4606      	mov	r6, r0
 802057a:	e6e9      	b.n	8020350 <__udivmoddi4+0x60>
 802057c:	4618      	mov	r0, r3
 802057e:	e6fd      	b.n	802037c <__udivmoddi4+0x8c>
 8020580:	4543      	cmp	r3, r8
 8020582:	d2e5      	bcs.n	8020550 <__udivmoddi4+0x260>
 8020584:	ebb8 0e02 	subs.w	lr, r8, r2
 8020588:	eb69 0104 	sbc.w	r1, r9, r4
 802058c:	3801      	subs	r0, #1
 802058e:	e7df      	b.n	8020550 <__udivmoddi4+0x260>
 8020590:	4608      	mov	r0, r1
 8020592:	e7d2      	b.n	802053a <__udivmoddi4+0x24a>
 8020594:	4660      	mov	r0, ip
 8020596:	e78d      	b.n	80204b4 <__udivmoddi4+0x1c4>
 8020598:	4681      	mov	r9, r0
 802059a:	e7b9      	b.n	8020510 <__udivmoddi4+0x220>
 802059c:	4666      	mov	r6, ip
 802059e:	e775      	b.n	802048c <__udivmoddi4+0x19c>
 80205a0:	4630      	mov	r0, r6
 80205a2:	e74a      	b.n	802043a <__udivmoddi4+0x14a>
 80205a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80205a8:	4439      	add	r1, r7
 80205aa:	e713      	b.n	80203d4 <__udivmoddi4+0xe4>
 80205ac:	3802      	subs	r0, #2
 80205ae:	443c      	add	r4, r7
 80205b0:	e724      	b.n	80203fc <__udivmoddi4+0x10c>
 80205b2:	bf00      	nop

080205b4 <__aeabi_idiv0>:
 80205b4:	4770      	bx	lr
 80205b6:	bf00      	nop

080205b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80205b8:	b580      	push	{r7, lr}
 80205ba:	b088      	sub	sp, #32
 80205bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80205be:	f107 030c 	add.w	r3, r7, #12
 80205c2:	2200      	movs	r2, #0
 80205c4:	601a      	str	r2, [r3, #0]
 80205c6:	605a      	str	r2, [r3, #4]
 80205c8:	609a      	str	r2, [r3, #8]
 80205ca:	60da      	str	r2, [r3, #12]
 80205cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80205ce:	2300      	movs	r3, #0
 80205d0:	60bb      	str	r3, [r7, #8]
 80205d2:	4b18      	ldr	r3, [pc, #96]	; (8020634 <MX_GPIO_Init+0x7c>)
 80205d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205d6:	4a17      	ldr	r2, [pc, #92]	; (8020634 <MX_GPIO_Init+0x7c>)
 80205d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80205dc:	6313      	str	r3, [r2, #48]	; 0x30
 80205de:	4b15      	ldr	r3, [pc, #84]	; (8020634 <MX_GPIO_Init+0x7c>)
 80205e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80205e6:	60bb      	str	r3, [r7, #8]
 80205e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80205ea:	2300      	movs	r3, #0
 80205ec:	607b      	str	r3, [r7, #4]
 80205ee:	4b11      	ldr	r3, [pc, #68]	; (8020634 <MX_GPIO_Init+0x7c>)
 80205f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205f2:	4a10      	ldr	r2, [pc, #64]	; (8020634 <MX_GPIO_Init+0x7c>)
 80205f4:	f043 0301 	orr.w	r3, r3, #1
 80205f8:	6313      	str	r3, [r2, #48]	; 0x30
 80205fa:	4b0e      	ldr	r3, [pc, #56]	; (8020634 <MX_GPIO_Init+0x7c>)
 80205fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205fe:	f003 0301 	and.w	r3, r3, #1
 8020602:	607b      	str	r3, [r7, #4]
 8020604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8020606:	2200      	movs	r2, #0
 8020608:	2120      	movs	r1, #32
 802060a:	480b      	ldr	r0, [pc, #44]	; (8020638 <MX_GPIO_Init+0x80>)
 802060c:	f000 fce6 	bl	8020fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8020610:	2320      	movs	r3, #32
 8020612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020614:	2301      	movs	r3, #1
 8020616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020618:	2300      	movs	r3, #0
 802061a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802061c:	2300      	movs	r3, #0
 802061e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020620:	f107 030c 	add.w	r3, r7, #12
 8020624:	4619      	mov	r1, r3
 8020626:	4804      	ldr	r0, [pc, #16]	; (8020638 <MX_GPIO_Init+0x80>)
 8020628:	f000 fb44 	bl	8020cb4 <HAL_GPIO_Init>

}
 802062c:	bf00      	nop
 802062e:	3720      	adds	r7, #32
 8020630:	46bd      	mov	sp, r7
 8020632:	bd80      	pop	{r7, pc}
 8020634:	40023800 	.word	0x40023800
 8020638:	40020000 	.word	0x40020000

0802063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802063c:	b580      	push	{r7, lr}
 802063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020640:	f000 f9bc 	bl	80209bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020644:	f000 f808 	bl	8020658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020648:	f7ff ffb6 	bl	80205b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 802064c:	f000 f91a 	bl	8020884 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //should not return
  user_app();
 8020650:	f001 fcc8 	bl	8021fe4 <user_app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8020654:	e7fe      	b.n	8020654 <main+0x18>
	...

08020658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020658:	b580      	push	{r7, lr}
 802065a:	b094      	sub	sp, #80	; 0x50
 802065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802065e:	f107 031c 	add.w	r3, r7, #28
 8020662:	2234      	movs	r2, #52	; 0x34
 8020664:	2100      	movs	r1, #0
 8020666:	4618      	mov	r0, r3
 8020668:	f001 fd40 	bl	80220ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802066c:	f107 0308 	add.w	r3, r7, #8
 8020670:	2200      	movs	r2, #0
 8020672:	601a      	str	r2, [r3, #0]
 8020674:	605a      	str	r2, [r3, #4]
 8020676:	609a      	str	r2, [r3, #8]
 8020678:	60da      	str	r2, [r3, #12]
 802067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 802067c:	2300      	movs	r3, #0
 802067e:	607b      	str	r3, [r7, #4]
 8020680:	4b2c      	ldr	r3, [pc, #176]	; (8020734 <SystemClock_Config+0xdc>)
 8020682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020684:	4a2b      	ldr	r2, [pc, #172]	; (8020734 <SystemClock_Config+0xdc>)
 8020686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802068a:	6413      	str	r3, [r2, #64]	; 0x40
 802068c:	4b29      	ldr	r3, [pc, #164]	; (8020734 <SystemClock_Config+0xdc>)
 802068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020694:	607b      	str	r3, [r7, #4]
 8020696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020698:	2300      	movs	r3, #0
 802069a:	603b      	str	r3, [r7, #0]
 802069c:	4b26      	ldr	r3, [pc, #152]	; (8020738 <SystemClock_Config+0xe0>)
 802069e:	681b      	ldr	r3, [r3, #0]
 80206a0:	4a25      	ldr	r2, [pc, #148]	; (8020738 <SystemClock_Config+0xe0>)
 80206a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80206a6:	6013      	str	r3, [r2, #0]
 80206a8:	4b23      	ldr	r3, [pc, #140]	; (8020738 <SystemClock_Config+0xe0>)
 80206aa:	681b      	ldr	r3, [r3, #0]
 80206ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80206b0:	603b      	str	r3, [r7, #0]
 80206b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80206b4:	2301      	movs	r3, #1
 80206b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80206b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80206bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80206be:	2302      	movs	r3, #2
 80206c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80206c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80206c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80206c8:	2304      	movs	r3, #4
 80206ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80206cc:	23b4      	movs	r3, #180	; 0xb4
 80206ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80206d0:	2302      	movs	r3, #2
 80206d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80206d4:	2302      	movs	r3, #2
 80206d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80206d8:	2302      	movs	r3, #2
 80206da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80206dc:	f107 031c 	add.w	r3, r7, #28
 80206e0:	4618      	mov	r0, r3
 80206e2:	f000 ffcb 	bl	802167c <HAL_RCC_OscConfig>
 80206e6:	4603      	mov	r3, r0
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	d001      	beq.n	80206f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80206ec:	f000 f826 	bl	802073c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80206f0:	f000 fca8 	bl	8021044 <HAL_PWREx_EnableOverDrive>
 80206f4:	4603      	mov	r3, r0
 80206f6:	2b00      	cmp	r3, #0
 80206f8:	d001      	beq.n	80206fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80206fa:	f000 f81f 	bl	802073c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80206fe:	230f      	movs	r3, #15
 8020700:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020702:	2302      	movs	r3, #2
 8020704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020706:	2300      	movs	r3, #0
 8020708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802070a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8020710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020714:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8020716:	f107 0308 	add.w	r3, r7, #8
 802071a:	2105      	movs	r1, #5
 802071c:	4618      	mov	r0, r3
 802071e:	f000 fce1 	bl	80210e4 <HAL_RCC_ClockConfig>
 8020722:	4603      	mov	r3, r0
 8020724:	2b00      	cmp	r3, #0
 8020726:	d001      	beq.n	802072c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8020728:	f000 f808 	bl	802073c <Error_Handler>
  }
}
 802072c:	bf00      	nop
 802072e:	3750      	adds	r7, #80	; 0x50
 8020730:	46bd      	mov	sp, r7
 8020732:	bd80      	pop	{r7, pc}
 8020734:	40023800 	.word	0x40023800
 8020738:	40007000 	.word	0x40007000

0802073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802073c:	b480      	push	{r7}
 802073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020740:	b672      	cpsid	i
}
 8020742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020744:	e7fe      	b.n	8020744 <Error_Handler+0x8>
	...

08020748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020748:	b480      	push	{r7}
 802074a:	b083      	sub	sp, #12
 802074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802074e:	2300      	movs	r3, #0
 8020750:	607b      	str	r3, [r7, #4]
 8020752:	4b10      	ldr	r3, [pc, #64]	; (8020794 <HAL_MspInit+0x4c>)
 8020754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020756:	4a0f      	ldr	r2, [pc, #60]	; (8020794 <HAL_MspInit+0x4c>)
 8020758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802075c:	6453      	str	r3, [r2, #68]	; 0x44
 802075e:	4b0d      	ldr	r3, [pc, #52]	; (8020794 <HAL_MspInit+0x4c>)
 8020760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020766:	607b      	str	r3, [r7, #4]
 8020768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802076a:	2300      	movs	r3, #0
 802076c:	603b      	str	r3, [r7, #0]
 802076e:	4b09      	ldr	r3, [pc, #36]	; (8020794 <HAL_MspInit+0x4c>)
 8020770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020772:	4a08      	ldr	r2, [pc, #32]	; (8020794 <HAL_MspInit+0x4c>)
 8020774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020778:	6413      	str	r3, [r2, #64]	; 0x40
 802077a:	4b06      	ldr	r3, [pc, #24]	; (8020794 <HAL_MspInit+0x4c>)
 802077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020782:	603b      	str	r3, [r7, #0]
 8020784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020786:	bf00      	nop
 8020788:	370c      	adds	r7, #12
 802078a:	46bd      	mov	sp, r7
 802078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020790:	4770      	bx	lr
 8020792:	bf00      	nop
 8020794:	40023800 	.word	0x40023800

08020798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020798:	b480      	push	{r7}
 802079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 802079c:	e7fe      	b.n	802079c <NMI_Handler+0x4>

0802079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802079e:	b480      	push	{r7}
 80207a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80207a2:	e7fe      	b.n	80207a2 <HardFault_Handler+0x4>

080207a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80207a4:	b480      	push	{r7}
 80207a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80207a8:	e7fe      	b.n	80207a8 <MemManage_Handler+0x4>

080207aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80207aa:	b480      	push	{r7}
 80207ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80207ae:	e7fe      	b.n	80207ae <BusFault_Handler+0x4>

080207b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80207b0:	b480      	push	{r7}
 80207b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80207b4:	e7fe      	b.n	80207b4 <UsageFault_Handler+0x4>

080207b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80207b6:	b480      	push	{r7}
 80207b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80207ba:	bf00      	nop
 80207bc:	46bd      	mov	sp, r7
 80207be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207c2:	4770      	bx	lr

080207c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80207c4:	b480      	push	{r7}
 80207c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80207c8:	bf00      	nop
 80207ca:	46bd      	mov	sp, r7
 80207cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207d0:	4770      	bx	lr

080207d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80207d2:	b480      	push	{r7}
 80207d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80207d6:	bf00      	nop
 80207d8:	46bd      	mov	sp, r7
 80207da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207de:	4770      	bx	lr

080207e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80207e0:	b580      	push	{r7, lr}
 80207e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80207e4:	f000 f93c 	bl	8020a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80207e8:	bf00      	nop
 80207ea:	bd80      	pop	{r7, pc}

080207ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80207ec:	b580      	push	{r7, lr}
 80207ee:	b086      	sub	sp, #24
 80207f0:	af00      	add	r7, sp, #0
 80207f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80207f4:	4a14      	ldr	r2, [pc, #80]	; (8020848 <_sbrk+0x5c>)
 80207f6:	4b15      	ldr	r3, [pc, #84]	; (802084c <_sbrk+0x60>)
 80207f8:	1ad3      	subs	r3, r2, r3
 80207fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80207fc:	697b      	ldr	r3, [r7, #20]
 80207fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8020800:	4b13      	ldr	r3, [pc, #76]	; (8020850 <_sbrk+0x64>)
 8020802:	681b      	ldr	r3, [r3, #0]
 8020804:	2b00      	cmp	r3, #0
 8020806:	d102      	bne.n	802080e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8020808:	4b11      	ldr	r3, [pc, #68]	; (8020850 <_sbrk+0x64>)
 802080a:	4a12      	ldr	r2, [pc, #72]	; (8020854 <_sbrk+0x68>)
 802080c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802080e:	4b10      	ldr	r3, [pc, #64]	; (8020850 <_sbrk+0x64>)
 8020810:	681a      	ldr	r2, [r3, #0]
 8020812:	687b      	ldr	r3, [r7, #4]
 8020814:	4413      	add	r3, r2
 8020816:	693a      	ldr	r2, [r7, #16]
 8020818:	429a      	cmp	r2, r3
 802081a:	d207      	bcs.n	802082c <_sbrk+0x40>
  {
    errno = ENOMEM;
 802081c:	f001 fc3c 	bl	8022098 <__errno>
 8020820:	4603      	mov	r3, r0
 8020822:	220c      	movs	r2, #12
 8020824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8020826:	f04f 33ff 	mov.w	r3, #4294967295
 802082a:	e009      	b.n	8020840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802082c:	4b08      	ldr	r3, [pc, #32]	; (8020850 <_sbrk+0x64>)
 802082e:	681b      	ldr	r3, [r3, #0]
 8020830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8020832:	4b07      	ldr	r3, [pc, #28]	; (8020850 <_sbrk+0x64>)
 8020834:	681a      	ldr	r2, [r3, #0]
 8020836:	687b      	ldr	r3, [r7, #4]
 8020838:	4413      	add	r3, r2
 802083a:	4a05      	ldr	r2, [pc, #20]	; (8020850 <_sbrk+0x64>)
 802083c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802083e:	68fb      	ldr	r3, [r7, #12]
}
 8020840:	4618      	mov	r0, r3
 8020842:	3718      	adds	r7, #24
 8020844:	46bd      	mov	sp, r7
 8020846:	bd80      	pop	{r7, pc}
 8020848:	20020000 	.word	0x20020000
 802084c:	00000400 	.word	0x00000400
 8020850:	2000008c 	.word	0x2000008c
 8020854:	200000f0 	.word	0x200000f0

08020858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020858:	b480      	push	{r7}
 802085a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802085c:	4b07      	ldr	r3, [pc, #28]	; (802087c <SystemInit+0x24>)
 802085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020862:	4a06      	ldr	r2, [pc, #24]	; (802087c <SystemInit+0x24>)
 8020864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 802086c:	4b03      	ldr	r3, [pc, #12]	; (802087c <SystemInit+0x24>)
 802086e:	4a04      	ldr	r2, [pc, #16]	; (8020880 <SystemInit+0x28>)
 8020870:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020872:	bf00      	nop
 8020874:	46bd      	mov	sp, r7
 8020876:	f85d 7b04 	ldr.w	r7, [sp], #4
 802087a:	4770      	bx	lr
 802087c:	e000ed00 	.word	0xe000ed00
 8020880:	08020000 	.word	0x08020000

08020884 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8020884:	b580      	push	{r7, lr}
 8020886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8020888:	4b11      	ldr	r3, [pc, #68]	; (80208d0 <MX_USART2_UART_Init+0x4c>)
 802088a:	4a12      	ldr	r2, [pc, #72]	; (80208d4 <MX_USART2_UART_Init+0x50>)
 802088c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 802088e:	4b10      	ldr	r3, [pc, #64]	; (80208d0 <MX_USART2_UART_Init+0x4c>)
 8020890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8020896:	4b0e      	ldr	r3, [pc, #56]	; (80208d0 <MX_USART2_UART_Init+0x4c>)
 8020898:	2200      	movs	r2, #0
 802089a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802089c:	4b0c      	ldr	r3, [pc, #48]	; (80208d0 <MX_USART2_UART_Init+0x4c>)
 802089e:	2200      	movs	r2, #0
 80208a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80208a2:	4b0b      	ldr	r3, [pc, #44]	; (80208d0 <MX_USART2_UART_Init+0x4c>)
 80208a4:	2200      	movs	r2, #0
 80208a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80208a8:	4b09      	ldr	r3, [pc, #36]	; (80208d0 <MX_USART2_UART_Init+0x4c>)
 80208aa:	220c      	movs	r2, #12
 80208ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80208ae:	4b08      	ldr	r3, [pc, #32]	; (80208d0 <MX_USART2_UART_Init+0x4c>)
 80208b0:	2200      	movs	r2, #0
 80208b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80208b4:	4b06      	ldr	r3, [pc, #24]	; (80208d0 <MX_USART2_UART_Init+0x4c>)
 80208b6:	2200      	movs	r2, #0
 80208b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80208ba:	4805      	ldr	r0, [pc, #20]	; (80208d0 <MX_USART2_UART_Init+0x4c>)
 80208bc:	f001 f97c 	bl	8021bb8 <HAL_UART_Init>
 80208c0:	4603      	mov	r3, r0
 80208c2:	2b00      	cmp	r3, #0
 80208c4:	d001      	beq.n	80208ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80208c6:	f7ff ff39 	bl	802073c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80208ca:	bf00      	nop
 80208cc:	bd80      	pop	{r7, pc}
 80208ce:	bf00      	nop
 80208d0:	20000098 	.word	0x20000098
 80208d4:	40004400 	.word	0x40004400

080208d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80208d8:	b580      	push	{r7, lr}
 80208da:	b08a      	sub	sp, #40	; 0x28
 80208dc:	af00      	add	r7, sp, #0
 80208de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80208e0:	f107 0314 	add.w	r3, r7, #20
 80208e4:	2200      	movs	r2, #0
 80208e6:	601a      	str	r2, [r3, #0]
 80208e8:	605a      	str	r2, [r3, #4]
 80208ea:	609a      	str	r2, [r3, #8]
 80208ec:	60da      	str	r2, [r3, #12]
 80208ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80208f0:	687b      	ldr	r3, [r7, #4]
 80208f2:	681b      	ldr	r3, [r3, #0]
 80208f4:	4a19      	ldr	r2, [pc, #100]	; (802095c <HAL_UART_MspInit+0x84>)
 80208f6:	4293      	cmp	r3, r2
 80208f8:	d12b      	bne.n	8020952 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80208fa:	2300      	movs	r3, #0
 80208fc:	613b      	str	r3, [r7, #16]
 80208fe:	4b18      	ldr	r3, [pc, #96]	; (8020960 <HAL_UART_MspInit+0x88>)
 8020900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020902:	4a17      	ldr	r2, [pc, #92]	; (8020960 <HAL_UART_MspInit+0x88>)
 8020904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020908:	6413      	str	r3, [r2, #64]	; 0x40
 802090a:	4b15      	ldr	r3, [pc, #84]	; (8020960 <HAL_UART_MspInit+0x88>)
 802090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802090e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020912:	613b      	str	r3, [r7, #16]
 8020914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020916:	2300      	movs	r3, #0
 8020918:	60fb      	str	r3, [r7, #12]
 802091a:	4b11      	ldr	r3, [pc, #68]	; (8020960 <HAL_UART_MspInit+0x88>)
 802091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802091e:	4a10      	ldr	r2, [pc, #64]	; (8020960 <HAL_UART_MspInit+0x88>)
 8020920:	f043 0301 	orr.w	r3, r3, #1
 8020924:	6313      	str	r3, [r2, #48]	; 0x30
 8020926:	4b0e      	ldr	r3, [pc, #56]	; (8020960 <HAL_UART_MspInit+0x88>)
 8020928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802092a:	f003 0301 	and.w	r3, r3, #1
 802092e:	60fb      	str	r3, [r7, #12]
 8020930:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8020932:	230c      	movs	r3, #12
 8020934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020936:	2302      	movs	r3, #2
 8020938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802093a:	2300      	movs	r3, #0
 802093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802093e:	2303      	movs	r3, #3
 8020940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8020942:	2307      	movs	r3, #7
 8020944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020946:	f107 0314 	add.w	r3, r7, #20
 802094a:	4619      	mov	r1, r3
 802094c:	4805      	ldr	r0, [pc, #20]	; (8020964 <HAL_UART_MspInit+0x8c>)
 802094e:	f000 f9b1 	bl	8020cb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8020952:	bf00      	nop
 8020954:	3728      	adds	r7, #40	; 0x28
 8020956:	46bd      	mov	sp, r7
 8020958:	bd80      	pop	{r7, pc}
 802095a:	bf00      	nop
 802095c:	40004400 	.word	0x40004400
 8020960:	40023800 	.word	0x40023800
 8020964:	40020000 	.word	0x40020000

08020968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8020968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80209a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 802096c:	480d      	ldr	r0, [pc, #52]	; (80209a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 802096e:	490e      	ldr	r1, [pc, #56]	; (80209a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8020970:	4a0e      	ldr	r2, [pc, #56]	; (80209ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8020972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020974:	e002      	b.n	802097c <LoopCopyDataInit>

08020976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802097a:	3304      	adds	r3, #4

0802097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020980:	d3f9      	bcc.n	8020976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8020982:	4a0b      	ldr	r2, [pc, #44]	; (80209b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8020984:	4c0b      	ldr	r4, [pc, #44]	; (80209b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8020986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020988:	e001      	b.n	802098e <LoopFillZerobss>

0802098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802098c:	3204      	adds	r2, #4

0802098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020990:	d3fb      	bcc.n	802098a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8020992:	f7ff ff61 	bl	8020858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020996:	f001 fb85 	bl	80220a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802099a:	f7ff fe4f 	bl	802063c <main>
  bx  lr    
 802099e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80209a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80209a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80209a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80209ac:	080229e4 	.word	0x080229e4
  ldr r2, =_sbss
 80209b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80209b4:	200000f0 	.word	0x200000f0

080209b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80209b8:	e7fe      	b.n	80209b8 <ADC_IRQHandler>
	...

080209bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80209bc:	b580      	push	{r7, lr}
 80209be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80209c0:	4b0e      	ldr	r3, [pc, #56]	; (80209fc <HAL_Init+0x40>)
 80209c2:	681b      	ldr	r3, [r3, #0]
 80209c4:	4a0d      	ldr	r2, [pc, #52]	; (80209fc <HAL_Init+0x40>)
 80209c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80209ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80209cc:	4b0b      	ldr	r3, [pc, #44]	; (80209fc <HAL_Init+0x40>)
 80209ce:	681b      	ldr	r3, [r3, #0]
 80209d0:	4a0a      	ldr	r2, [pc, #40]	; (80209fc <HAL_Init+0x40>)
 80209d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80209d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80209d8:	4b08      	ldr	r3, [pc, #32]	; (80209fc <HAL_Init+0x40>)
 80209da:	681b      	ldr	r3, [r3, #0]
 80209dc:	4a07      	ldr	r2, [pc, #28]	; (80209fc <HAL_Init+0x40>)
 80209de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80209e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80209e4:	2003      	movs	r0, #3
 80209e6:	f000 f931 	bl	8020c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80209ea:	200f      	movs	r0, #15
 80209ec:	f000 f808 	bl	8020a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80209f0:	f7ff feaa 	bl	8020748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80209f4:	2300      	movs	r3, #0
}
 80209f6:	4618      	mov	r0, r3
 80209f8:	bd80      	pop	{r7, pc}
 80209fa:	bf00      	nop
 80209fc:	40023c00 	.word	0x40023c00

08020a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020a00:	b580      	push	{r7, lr}
 8020a02:	b082      	sub	sp, #8
 8020a04:	af00      	add	r7, sp, #0
 8020a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020a08:	4b12      	ldr	r3, [pc, #72]	; (8020a54 <HAL_InitTick+0x54>)
 8020a0a:	681a      	ldr	r2, [r3, #0]
 8020a0c:	4b12      	ldr	r3, [pc, #72]	; (8020a58 <HAL_InitTick+0x58>)
 8020a0e:	781b      	ldrb	r3, [r3, #0]
 8020a10:	4619      	mov	r1, r3
 8020a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8020a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8020a1e:	4618      	mov	r0, r3
 8020a20:	f000 f93b 	bl	8020c9a <HAL_SYSTICK_Config>
 8020a24:	4603      	mov	r3, r0
 8020a26:	2b00      	cmp	r3, #0
 8020a28:	d001      	beq.n	8020a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8020a2a:	2301      	movs	r3, #1
 8020a2c:	e00e      	b.n	8020a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020a2e:	687b      	ldr	r3, [r7, #4]
 8020a30:	2b0f      	cmp	r3, #15
 8020a32:	d80a      	bhi.n	8020a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020a34:	2200      	movs	r2, #0
 8020a36:	6879      	ldr	r1, [r7, #4]
 8020a38:	f04f 30ff 	mov.w	r0, #4294967295
 8020a3c:	f000 f911 	bl	8020c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020a40:	4a06      	ldr	r2, [pc, #24]	; (8020a5c <HAL_InitTick+0x5c>)
 8020a42:	687b      	ldr	r3, [r7, #4]
 8020a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8020a46:	2300      	movs	r3, #0
 8020a48:	e000      	b.n	8020a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8020a4a:	2301      	movs	r3, #1
}
 8020a4c:	4618      	mov	r0, r3
 8020a4e:	3708      	adds	r7, #8
 8020a50:	46bd      	mov	sp, r7
 8020a52:	bd80      	pop	{r7, pc}
 8020a54:	20000000 	.word	0x20000000
 8020a58:	20000008 	.word	0x20000008
 8020a5c:	20000004 	.word	0x20000004

08020a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020a60:	b480      	push	{r7}
 8020a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020a64:	4b06      	ldr	r3, [pc, #24]	; (8020a80 <HAL_IncTick+0x20>)
 8020a66:	781b      	ldrb	r3, [r3, #0]
 8020a68:	461a      	mov	r2, r3
 8020a6a:	4b06      	ldr	r3, [pc, #24]	; (8020a84 <HAL_IncTick+0x24>)
 8020a6c:	681b      	ldr	r3, [r3, #0]
 8020a6e:	4413      	add	r3, r2
 8020a70:	4a04      	ldr	r2, [pc, #16]	; (8020a84 <HAL_IncTick+0x24>)
 8020a72:	6013      	str	r3, [r2, #0]
}
 8020a74:	bf00      	nop
 8020a76:	46bd      	mov	sp, r7
 8020a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a7c:	4770      	bx	lr
 8020a7e:	bf00      	nop
 8020a80:	20000008 	.word	0x20000008
 8020a84:	200000dc 	.word	0x200000dc

08020a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020a88:	b480      	push	{r7}
 8020a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8020a8c:	4b03      	ldr	r3, [pc, #12]	; (8020a9c <HAL_GetTick+0x14>)
 8020a8e:	681b      	ldr	r3, [r3, #0]
}
 8020a90:	4618      	mov	r0, r3
 8020a92:	46bd      	mov	sp, r7
 8020a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a98:	4770      	bx	lr
 8020a9a:	bf00      	nop
 8020a9c:	200000dc 	.word	0x200000dc

08020aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020aa0:	b580      	push	{r7, lr}
 8020aa2:	b084      	sub	sp, #16
 8020aa4:	af00      	add	r7, sp, #0
 8020aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8020aa8:	f7ff ffee 	bl	8020a88 <HAL_GetTick>
 8020aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8020aae:	687b      	ldr	r3, [r7, #4]
 8020ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020ab2:	68fb      	ldr	r3, [r7, #12]
 8020ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020ab8:	d005      	beq.n	8020ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8020aba:	4b0a      	ldr	r3, [pc, #40]	; (8020ae4 <HAL_Delay+0x44>)
 8020abc:	781b      	ldrb	r3, [r3, #0]
 8020abe:	461a      	mov	r2, r3
 8020ac0:	68fb      	ldr	r3, [r7, #12]
 8020ac2:	4413      	add	r3, r2
 8020ac4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8020ac6:	bf00      	nop
 8020ac8:	f7ff ffde 	bl	8020a88 <HAL_GetTick>
 8020acc:	4602      	mov	r2, r0
 8020ace:	68bb      	ldr	r3, [r7, #8]
 8020ad0:	1ad3      	subs	r3, r2, r3
 8020ad2:	68fa      	ldr	r2, [r7, #12]
 8020ad4:	429a      	cmp	r2, r3
 8020ad6:	d8f7      	bhi.n	8020ac8 <HAL_Delay+0x28>
  {
  }
}
 8020ad8:	bf00      	nop
 8020ada:	bf00      	nop
 8020adc:	3710      	adds	r7, #16
 8020ade:	46bd      	mov	sp, r7
 8020ae0:	bd80      	pop	{r7, pc}
 8020ae2:	bf00      	nop
 8020ae4:	20000008 	.word	0x20000008

08020ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020ae8:	b480      	push	{r7}
 8020aea:	b085      	sub	sp, #20
 8020aec:	af00      	add	r7, sp, #0
 8020aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020af0:	687b      	ldr	r3, [r7, #4]
 8020af2:	f003 0307 	and.w	r3, r3, #7
 8020af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020af8:	4b0c      	ldr	r3, [pc, #48]	; (8020b2c <__NVIC_SetPriorityGrouping+0x44>)
 8020afa:	68db      	ldr	r3, [r3, #12]
 8020afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020afe:	68ba      	ldr	r2, [r7, #8]
 8020b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8020b04:	4013      	ands	r3, r2
 8020b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020b08:	68fb      	ldr	r3, [r7, #12]
 8020b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020b0c:	68bb      	ldr	r3, [r7, #8]
 8020b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8020b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020b1a:	4a04      	ldr	r2, [pc, #16]	; (8020b2c <__NVIC_SetPriorityGrouping+0x44>)
 8020b1c:	68bb      	ldr	r3, [r7, #8]
 8020b1e:	60d3      	str	r3, [r2, #12]
}
 8020b20:	bf00      	nop
 8020b22:	3714      	adds	r7, #20
 8020b24:	46bd      	mov	sp, r7
 8020b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b2a:	4770      	bx	lr
 8020b2c:	e000ed00 	.word	0xe000ed00

08020b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020b30:	b480      	push	{r7}
 8020b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020b34:	4b04      	ldr	r3, [pc, #16]	; (8020b48 <__NVIC_GetPriorityGrouping+0x18>)
 8020b36:	68db      	ldr	r3, [r3, #12]
 8020b38:	0a1b      	lsrs	r3, r3, #8
 8020b3a:	f003 0307 	and.w	r3, r3, #7
}
 8020b3e:	4618      	mov	r0, r3
 8020b40:	46bd      	mov	sp, r7
 8020b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b46:	4770      	bx	lr
 8020b48:	e000ed00 	.word	0xe000ed00

08020b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020b4c:	b480      	push	{r7}
 8020b4e:	b083      	sub	sp, #12
 8020b50:	af00      	add	r7, sp, #0
 8020b52:	4603      	mov	r3, r0
 8020b54:	6039      	str	r1, [r7, #0]
 8020b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020b5c:	2b00      	cmp	r3, #0
 8020b5e:	db0a      	blt.n	8020b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020b60:	683b      	ldr	r3, [r7, #0]
 8020b62:	b2da      	uxtb	r2, r3
 8020b64:	490c      	ldr	r1, [pc, #48]	; (8020b98 <__NVIC_SetPriority+0x4c>)
 8020b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020b6a:	0112      	lsls	r2, r2, #4
 8020b6c:	b2d2      	uxtb	r2, r2
 8020b6e:	440b      	add	r3, r1
 8020b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020b74:	e00a      	b.n	8020b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020b76:	683b      	ldr	r3, [r7, #0]
 8020b78:	b2da      	uxtb	r2, r3
 8020b7a:	4908      	ldr	r1, [pc, #32]	; (8020b9c <__NVIC_SetPriority+0x50>)
 8020b7c:	79fb      	ldrb	r3, [r7, #7]
 8020b7e:	f003 030f 	and.w	r3, r3, #15
 8020b82:	3b04      	subs	r3, #4
 8020b84:	0112      	lsls	r2, r2, #4
 8020b86:	b2d2      	uxtb	r2, r2
 8020b88:	440b      	add	r3, r1
 8020b8a:	761a      	strb	r2, [r3, #24]
}
 8020b8c:	bf00      	nop
 8020b8e:	370c      	adds	r7, #12
 8020b90:	46bd      	mov	sp, r7
 8020b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b96:	4770      	bx	lr
 8020b98:	e000e100 	.word	0xe000e100
 8020b9c:	e000ed00 	.word	0xe000ed00

08020ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020ba0:	b480      	push	{r7}
 8020ba2:	b089      	sub	sp, #36	; 0x24
 8020ba4:	af00      	add	r7, sp, #0
 8020ba6:	60f8      	str	r0, [r7, #12]
 8020ba8:	60b9      	str	r1, [r7, #8]
 8020baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020bac:	68fb      	ldr	r3, [r7, #12]
 8020bae:	f003 0307 	and.w	r3, r3, #7
 8020bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020bb4:	69fb      	ldr	r3, [r7, #28]
 8020bb6:	f1c3 0307 	rsb	r3, r3, #7
 8020bba:	2b04      	cmp	r3, #4
 8020bbc:	bf28      	it	cs
 8020bbe:	2304      	movcs	r3, #4
 8020bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020bc2:	69fb      	ldr	r3, [r7, #28]
 8020bc4:	3304      	adds	r3, #4
 8020bc6:	2b06      	cmp	r3, #6
 8020bc8:	d902      	bls.n	8020bd0 <NVIC_EncodePriority+0x30>
 8020bca:	69fb      	ldr	r3, [r7, #28]
 8020bcc:	3b03      	subs	r3, #3
 8020bce:	e000      	b.n	8020bd2 <NVIC_EncodePriority+0x32>
 8020bd0:	2300      	movs	r3, #0
 8020bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8020bd8:	69bb      	ldr	r3, [r7, #24]
 8020bda:	fa02 f303 	lsl.w	r3, r2, r3
 8020bde:	43da      	mvns	r2, r3
 8020be0:	68bb      	ldr	r3, [r7, #8]
 8020be2:	401a      	ands	r2, r3
 8020be4:	697b      	ldr	r3, [r7, #20]
 8020be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020be8:	f04f 31ff 	mov.w	r1, #4294967295
 8020bec:	697b      	ldr	r3, [r7, #20]
 8020bee:	fa01 f303 	lsl.w	r3, r1, r3
 8020bf2:	43d9      	mvns	r1, r3
 8020bf4:	687b      	ldr	r3, [r7, #4]
 8020bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020bf8:	4313      	orrs	r3, r2
         );
}
 8020bfa:	4618      	mov	r0, r3
 8020bfc:	3724      	adds	r7, #36	; 0x24
 8020bfe:	46bd      	mov	sp, r7
 8020c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c04:	4770      	bx	lr
	...

08020c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020c08:	b580      	push	{r7, lr}
 8020c0a:	b082      	sub	sp, #8
 8020c0c:	af00      	add	r7, sp, #0
 8020c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020c10:	687b      	ldr	r3, [r7, #4]
 8020c12:	3b01      	subs	r3, #1
 8020c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8020c18:	d301      	bcc.n	8020c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020c1a:	2301      	movs	r3, #1
 8020c1c:	e00f      	b.n	8020c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020c1e:	4a0a      	ldr	r2, [pc, #40]	; (8020c48 <SysTick_Config+0x40>)
 8020c20:	687b      	ldr	r3, [r7, #4]
 8020c22:	3b01      	subs	r3, #1
 8020c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020c26:	210f      	movs	r1, #15
 8020c28:	f04f 30ff 	mov.w	r0, #4294967295
 8020c2c:	f7ff ff8e 	bl	8020b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020c30:	4b05      	ldr	r3, [pc, #20]	; (8020c48 <SysTick_Config+0x40>)
 8020c32:	2200      	movs	r2, #0
 8020c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020c36:	4b04      	ldr	r3, [pc, #16]	; (8020c48 <SysTick_Config+0x40>)
 8020c38:	2207      	movs	r2, #7
 8020c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020c3c:	2300      	movs	r3, #0
}
 8020c3e:	4618      	mov	r0, r3
 8020c40:	3708      	adds	r7, #8
 8020c42:	46bd      	mov	sp, r7
 8020c44:	bd80      	pop	{r7, pc}
 8020c46:	bf00      	nop
 8020c48:	e000e010 	.word	0xe000e010

08020c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020c4c:	b580      	push	{r7, lr}
 8020c4e:	b082      	sub	sp, #8
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020c54:	6878      	ldr	r0, [r7, #4]
 8020c56:	f7ff ff47 	bl	8020ae8 <__NVIC_SetPriorityGrouping>
}
 8020c5a:	bf00      	nop
 8020c5c:	3708      	adds	r7, #8
 8020c5e:	46bd      	mov	sp, r7
 8020c60:	bd80      	pop	{r7, pc}

08020c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8020c62:	b580      	push	{r7, lr}
 8020c64:	b086      	sub	sp, #24
 8020c66:	af00      	add	r7, sp, #0
 8020c68:	4603      	mov	r3, r0
 8020c6a:	60b9      	str	r1, [r7, #8]
 8020c6c:	607a      	str	r2, [r7, #4]
 8020c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8020c70:	2300      	movs	r3, #0
 8020c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8020c74:	f7ff ff5c 	bl	8020b30 <__NVIC_GetPriorityGrouping>
 8020c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020c7a:	687a      	ldr	r2, [r7, #4]
 8020c7c:	68b9      	ldr	r1, [r7, #8]
 8020c7e:	6978      	ldr	r0, [r7, #20]
 8020c80:	f7ff ff8e 	bl	8020ba0 <NVIC_EncodePriority>
 8020c84:	4602      	mov	r2, r0
 8020c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020c8a:	4611      	mov	r1, r2
 8020c8c:	4618      	mov	r0, r3
 8020c8e:	f7ff ff5d 	bl	8020b4c <__NVIC_SetPriority>
}
 8020c92:	bf00      	nop
 8020c94:	3718      	adds	r7, #24
 8020c96:	46bd      	mov	sp, r7
 8020c98:	bd80      	pop	{r7, pc}

08020c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020c9a:	b580      	push	{r7, lr}
 8020c9c:	b082      	sub	sp, #8
 8020c9e:	af00      	add	r7, sp, #0
 8020ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020ca2:	6878      	ldr	r0, [r7, #4]
 8020ca4:	f7ff ffb0 	bl	8020c08 <SysTick_Config>
 8020ca8:	4603      	mov	r3, r0
}
 8020caa:	4618      	mov	r0, r3
 8020cac:	3708      	adds	r7, #8
 8020cae:	46bd      	mov	sp, r7
 8020cb0:	bd80      	pop	{r7, pc}
	...

08020cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8020cb4:	b480      	push	{r7}
 8020cb6:	b089      	sub	sp, #36	; 0x24
 8020cb8:	af00      	add	r7, sp, #0
 8020cba:	6078      	str	r0, [r7, #4]
 8020cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8020cbe:	2300      	movs	r3, #0
 8020cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8020cc2:	2300      	movs	r3, #0
 8020cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8020cc6:	2300      	movs	r3, #0
 8020cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8020cca:	2300      	movs	r3, #0
 8020ccc:	61fb      	str	r3, [r7, #28]
 8020cce:	e165      	b.n	8020f9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8020cd0:	2201      	movs	r2, #1
 8020cd2:	69fb      	ldr	r3, [r7, #28]
 8020cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8020cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8020cda:	683b      	ldr	r3, [r7, #0]
 8020cdc:	681b      	ldr	r3, [r3, #0]
 8020cde:	697a      	ldr	r2, [r7, #20]
 8020ce0:	4013      	ands	r3, r2
 8020ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8020ce4:	693a      	ldr	r2, [r7, #16]
 8020ce6:	697b      	ldr	r3, [r7, #20]
 8020ce8:	429a      	cmp	r2, r3
 8020cea:	f040 8154 	bne.w	8020f96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8020cee:	683b      	ldr	r3, [r7, #0]
 8020cf0:	685b      	ldr	r3, [r3, #4]
 8020cf2:	f003 0303 	and.w	r3, r3, #3
 8020cf6:	2b01      	cmp	r3, #1
 8020cf8:	d005      	beq.n	8020d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020cfa:	683b      	ldr	r3, [r7, #0]
 8020cfc:	685b      	ldr	r3, [r3, #4]
 8020cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8020d02:	2b02      	cmp	r3, #2
 8020d04:	d130      	bne.n	8020d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8020d06:	687b      	ldr	r3, [r7, #4]
 8020d08:	689b      	ldr	r3, [r3, #8]
 8020d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8020d0c:	69fb      	ldr	r3, [r7, #28]
 8020d0e:	005b      	lsls	r3, r3, #1
 8020d10:	2203      	movs	r2, #3
 8020d12:	fa02 f303 	lsl.w	r3, r2, r3
 8020d16:	43db      	mvns	r3, r3
 8020d18:	69ba      	ldr	r2, [r7, #24]
 8020d1a:	4013      	ands	r3, r2
 8020d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8020d1e:	683b      	ldr	r3, [r7, #0]
 8020d20:	68da      	ldr	r2, [r3, #12]
 8020d22:	69fb      	ldr	r3, [r7, #28]
 8020d24:	005b      	lsls	r3, r3, #1
 8020d26:	fa02 f303 	lsl.w	r3, r2, r3
 8020d2a:	69ba      	ldr	r2, [r7, #24]
 8020d2c:	4313      	orrs	r3, r2
 8020d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8020d30:	687b      	ldr	r3, [r7, #4]
 8020d32:	69ba      	ldr	r2, [r7, #24]
 8020d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8020d36:	687b      	ldr	r3, [r7, #4]
 8020d38:	685b      	ldr	r3, [r3, #4]
 8020d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8020d3c:	2201      	movs	r2, #1
 8020d3e:	69fb      	ldr	r3, [r7, #28]
 8020d40:	fa02 f303 	lsl.w	r3, r2, r3
 8020d44:	43db      	mvns	r3, r3
 8020d46:	69ba      	ldr	r2, [r7, #24]
 8020d48:	4013      	ands	r3, r2
 8020d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8020d4c:	683b      	ldr	r3, [r7, #0]
 8020d4e:	685b      	ldr	r3, [r3, #4]
 8020d50:	091b      	lsrs	r3, r3, #4
 8020d52:	f003 0201 	and.w	r2, r3, #1
 8020d56:	69fb      	ldr	r3, [r7, #28]
 8020d58:	fa02 f303 	lsl.w	r3, r2, r3
 8020d5c:	69ba      	ldr	r2, [r7, #24]
 8020d5e:	4313      	orrs	r3, r2
 8020d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8020d62:	687b      	ldr	r3, [r7, #4]
 8020d64:	69ba      	ldr	r2, [r7, #24]
 8020d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8020d68:	683b      	ldr	r3, [r7, #0]
 8020d6a:	685b      	ldr	r3, [r3, #4]
 8020d6c:	f003 0303 	and.w	r3, r3, #3
 8020d70:	2b03      	cmp	r3, #3
 8020d72:	d017      	beq.n	8020da4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8020d74:	687b      	ldr	r3, [r7, #4]
 8020d76:	68db      	ldr	r3, [r3, #12]
 8020d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8020d7a:	69fb      	ldr	r3, [r7, #28]
 8020d7c:	005b      	lsls	r3, r3, #1
 8020d7e:	2203      	movs	r2, #3
 8020d80:	fa02 f303 	lsl.w	r3, r2, r3
 8020d84:	43db      	mvns	r3, r3
 8020d86:	69ba      	ldr	r2, [r7, #24]
 8020d88:	4013      	ands	r3, r2
 8020d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8020d8c:	683b      	ldr	r3, [r7, #0]
 8020d8e:	689a      	ldr	r2, [r3, #8]
 8020d90:	69fb      	ldr	r3, [r7, #28]
 8020d92:	005b      	lsls	r3, r3, #1
 8020d94:	fa02 f303 	lsl.w	r3, r2, r3
 8020d98:	69ba      	ldr	r2, [r7, #24]
 8020d9a:	4313      	orrs	r3, r2
 8020d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8020d9e:	687b      	ldr	r3, [r7, #4]
 8020da0:	69ba      	ldr	r2, [r7, #24]
 8020da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020da4:	683b      	ldr	r3, [r7, #0]
 8020da6:	685b      	ldr	r3, [r3, #4]
 8020da8:	f003 0303 	and.w	r3, r3, #3
 8020dac:	2b02      	cmp	r3, #2
 8020dae:	d123      	bne.n	8020df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8020db0:	69fb      	ldr	r3, [r7, #28]
 8020db2:	08da      	lsrs	r2, r3, #3
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	3208      	adds	r2, #8
 8020db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8020dbe:	69fb      	ldr	r3, [r7, #28]
 8020dc0:	f003 0307 	and.w	r3, r3, #7
 8020dc4:	009b      	lsls	r3, r3, #2
 8020dc6:	220f      	movs	r2, #15
 8020dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8020dcc:	43db      	mvns	r3, r3
 8020dce:	69ba      	ldr	r2, [r7, #24]
 8020dd0:	4013      	ands	r3, r2
 8020dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8020dd4:	683b      	ldr	r3, [r7, #0]
 8020dd6:	691a      	ldr	r2, [r3, #16]
 8020dd8:	69fb      	ldr	r3, [r7, #28]
 8020dda:	f003 0307 	and.w	r3, r3, #7
 8020dde:	009b      	lsls	r3, r3, #2
 8020de0:	fa02 f303 	lsl.w	r3, r2, r3
 8020de4:	69ba      	ldr	r2, [r7, #24]
 8020de6:	4313      	orrs	r3, r2
 8020de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8020dea:	69fb      	ldr	r3, [r7, #28]
 8020dec:	08da      	lsrs	r2, r3, #3
 8020dee:	687b      	ldr	r3, [r7, #4]
 8020df0:	3208      	adds	r2, #8
 8020df2:	69b9      	ldr	r1, [r7, #24]
 8020df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	681b      	ldr	r3, [r3, #0]
 8020dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8020dfe:	69fb      	ldr	r3, [r7, #28]
 8020e00:	005b      	lsls	r3, r3, #1
 8020e02:	2203      	movs	r2, #3
 8020e04:	fa02 f303 	lsl.w	r3, r2, r3
 8020e08:	43db      	mvns	r3, r3
 8020e0a:	69ba      	ldr	r2, [r7, #24]
 8020e0c:	4013      	ands	r3, r2
 8020e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8020e10:	683b      	ldr	r3, [r7, #0]
 8020e12:	685b      	ldr	r3, [r3, #4]
 8020e14:	f003 0203 	and.w	r2, r3, #3
 8020e18:	69fb      	ldr	r3, [r7, #28]
 8020e1a:	005b      	lsls	r3, r3, #1
 8020e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8020e20:	69ba      	ldr	r2, [r7, #24]
 8020e22:	4313      	orrs	r3, r2
 8020e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8020e26:	687b      	ldr	r3, [r7, #4]
 8020e28:	69ba      	ldr	r2, [r7, #24]
 8020e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8020e2c:	683b      	ldr	r3, [r7, #0]
 8020e2e:	685b      	ldr	r3, [r3, #4]
 8020e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	f000 80ae 	beq.w	8020f96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020e3a:	2300      	movs	r3, #0
 8020e3c:	60fb      	str	r3, [r7, #12]
 8020e3e:	4b5d      	ldr	r3, [pc, #372]	; (8020fb4 <HAL_GPIO_Init+0x300>)
 8020e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020e42:	4a5c      	ldr	r2, [pc, #368]	; (8020fb4 <HAL_GPIO_Init+0x300>)
 8020e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020e48:	6453      	str	r3, [r2, #68]	; 0x44
 8020e4a:	4b5a      	ldr	r3, [pc, #360]	; (8020fb4 <HAL_GPIO_Init+0x300>)
 8020e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020e52:	60fb      	str	r3, [r7, #12]
 8020e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8020e56:	4a58      	ldr	r2, [pc, #352]	; (8020fb8 <HAL_GPIO_Init+0x304>)
 8020e58:	69fb      	ldr	r3, [r7, #28]
 8020e5a:	089b      	lsrs	r3, r3, #2
 8020e5c:	3302      	adds	r3, #2
 8020e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8020e64:	69fb      	ldr	r3, [r7, #28]
 8020e66:	f003 0303 	and.w	r3, r3, #3
 8020e6a:	009b      	lsls	r3, r3, #2
 8020e6c:	220f      	movs	r2, #15
 8020e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8020e72:	43db      	mvns	r3, r3
 8020e74:	69ba      	ldr	r2, [r7, #24]
 8020e76:	4013      	ands	r3, r2
 8020e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8020e7a:	687b      	ldr	r3, [r7, #4]
 8020e7c:	4a4f      	ldr	r2, [pc, #316]	; (8020fbc <HAL_GPIO_Init+0x308>)
 8020e7e:	4293      	cmp	r3, r2
 8020e80:	d025      	beq.n	8020ece <HAL_GPIO_Init+0x21a>
 8020e82:	687b      	ldr	r3, [r7, #4]
 8020e84:	4a4e      	ldr	r2, [pc, #312]	; (8020fc0 <HAL_GPIO_Init+0x30c>)
 8020e86:	4293      	cmp	r3, r2
 8020e88:	d01f      	beq.n	8020eca <HAL_GPIO_Init+0x216>
 8020e8a:	687b      	ldr	r3, [r7, #4]
 8020e8c:	4a4d      	ldr	r2, [pc, #308]	; (8020fc4 <HAL_GPIO_Init+0x310>)
 8020e8e:	4293      	cmp	r3, r2
 8020e90:	d019      	beq.n	8020ec6 <HAL_GPIO_Init+0x212>
 8020e92:	687b      	ldr	r3, [r7, #4]
 8020e94:	4a4c      	ldr	r2, [pc, #304]	; (8020fc8 <HAL_GPIO_Init+0x314>)
 8020e96:	4293      	cmp	r3, r2
 8020e98:	d013      	beq.n	8020ec2 <HAL_GPIO_Init+0x20e>
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	4a4b      	ldr	r2, [pc, #300]	; (8020fcc <HAL_GPIO_Init+0x318>)
 8020e9e:	4293      	cmp	r3, r2
 8020ea0:	d00d      	beq.n	8020ebe <HAL_GPIO_Init+0x20a>
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	4a4a      	ldr	r2, [pc, #296]	; (8020fd0 <HAL_GPIO_Init+0x31c>)
 8020ea6:	4293      	cmp	r3, r2
 8020ea8:	d007      	beq.n	8020eba <HAL_GPIO_Init+0x206>
 8020eaa:	687b      	ldr	r3, [r7, #4]
 8020eac:	4a49      	ldr	r2, [pc, #292]	; (8020fd4 <HAL_GPIO_Init+0x320>)
 8020eae:	4293      	cmp	r3, r2
 8020eb0:	d101      	bne.n	8020eb6 <HAL_GPIO_Init+0x202>
 8020eb2:	2306      	movs	r3, #6
 8020eb4:	e00c      	b.n	8020ed0 <HAL_GPIO_Init+0x21c>
 8020eb6:	2307      	movs	r3, #7
 8020eb8:	e00a      	b.n	8020ed0 <HAL_GPIO_Init+0x21c>
 8020eba:	2305      	movs	r3, #5
 8020ebc:	e008      	b.n	8020ed0 <HAL_GPIO_Init+0x21c>
 8020ebe:	2304      	movs	r3, #4
 8020ec0:	e006      	b.n	8020ed0 <HAL_GPIO_Init+0x21c>
 8020ec2:	2303      	movs	r3, #3
 8020ec4:	e004      	b.n	8020ed0 <HAL_GPIO_Init+0x21c>
 8020ec6:	2302      	movs	r3, #2
 8020ec8:	e002      	b.n	8020ed0 <HAL_GPIO_Init+0x21c>
 8020eca:	2301      	movs	r3, #1
 8020ecc:	e000      	b.n	8020ed0 <HAL_GPIO_Init+0x21c>
 8020ece:	2300      	movs	r3, #0
 8020ed0:	69fa      	ldr	r2, [r7, #28]
 8020ed2:	f002 0203 	and.w	r2, r2, #3
 8020ed6:	0092      	lsls	r2, r2, #2
 8020ed8:	4093      	lsls	r3, r2
 8020eda:	69ba      	ldr	r2, [r7, #24]
 8020edc:	4313      	orrs	r3, r2
 8020ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8020ee0:	4935      	ldr	r1, [pc, #212]	; (8020fb8 <HAL_GPIO_Init+0x304>)
 8020ee2:	69fb      	ldr	r3, [r7, #28]
 8020ee4:	089b      	lsrs	r3, r3, #2
 8020ee6:	3302      	adds	r3, #2
 8020ee8:	69ba      	ldr	r2, [r7, #24]
 8020eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8020eee:	4b3a      	ldr	r3, [pc, #232]	; (8020fd8 <HAL_GPIO_Init+0x324>)
 8020ef0:	681b      	ldr	r3, [r3, #0]
 8020ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020ef4:	693b      	ldr	r3, [r7, #16]
 8020ef6:	43db      	mvns	r3, r3
 8020ef8:	69ba      	ldr	r2, [r7, #24]
 8020efa:	4013      	ands	r3, r2
 8020efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8020efe:	683b      	ldr	r3, [r7, #0]
 8020f00:	685b      	ldr	r3, [r3, #4]
 8020f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	d003      	beq.n	8020f12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8020f0a:	69ba      	ldr	r2, [r7, #24]
 8020f0c:	693b      	ldr	r3, [r7, #16]
 8020f0e:	4313      	orrs	r3, r2
 8020f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8020f12:	4a31      	ldr	r2, [pc, #196]	; (8020fd8 <HAL_GPIO_Init+0x324>)
 8020f14:	69bb      	ldr	r3, [r7, #24]
 8020f16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8020f18:	4b2f      	ldr	r3, [pc, #188]	; (8020fd8 <HAL_GPIO_Init+0x324>)
 8020f1a:	685b      	ldr	r3, [r3, #4]
 8020f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020f1e:	693b      	ldr	r3, [r7, #16]
 8020f20:	43db      	mvns	r3, r3
 8020f22:	69ba      	ldr	r2, [r7, #24]
 8020f24:	4013      	ands	r3, r2
 8020f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8020f28:	683b      	ldr	r3, [r7, #0]
 8020f2a:	685b      	ldr	r3, [r3, #4]
 8020f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020f30:	2b00      	cmp	r3, #0
 8020f32:	d003      	beq.n	8020f3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8020f34:	69ba      	ldr	r2, [r7, #24]
 8020f36:	693b      	ldr	r3, [r7, #16]
 8020f38:	4313      	orrs	r3, r2
 8020f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8020f3c:	4a26      	ldr	r2, [pc, #152]	; (8020fd8 <HAL_GPIO_Init+0x324>)
 8020f3e:	69bb      	ldr	r3, [r7, #24]
 8020f40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8020f42:	4b25      	ldr	r3, [pc, #148]	; (8020fd8 <HAL_GPIO_Init+0x324>)
 8020f44:	689b      	ldr	r3, [r3, #8]
 8020f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020f48:	693b      	ldr	r3, [r7, #16]
 8020f4a:	43db      	mvns	r3, r3
 8020f4c:	69ba      	ldr	r2, [r7, #24]
 8020f4e:	4013      	ands	r3, r2
 8020f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8020f52:	683b      	ldr	r3, [r7, #0]
 8020f54:	685b      	ldr	r3, [r3, #4]
 8020f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	d003      	beq.n	8020f66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8020f5e:	69ba      	ldr	r2, [r7, #24]
 8020f60:	693b      	ldr	r3, [r7, #16]
 8020f62:	4313      	orrs	r3, r2
 8020f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8020f66:	4a1c      	ldr	r2, [pc, #112]	; (8020fd8 <HAL_GPIO_Init+0x324>)
 8020f68:	69bb      	ldr	r3, [r7, #24]
 8020f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8020f6c:	4b1a      	ldr	r3, [pc, #104]	; (8020fd8 <HAL_GPIO_Init+0x324>)
 8020f6e:	68db      	ldr	r3, [r3, #12]
 8020f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020f72:	693b      	ldr	r3, [r7, #16]
 8020f74:	43db      	mvns	r3, r3
 8020f76:	69ba      	ldr	r2, [r7, #24]
 8020f78:	4013      	ands	r3, r2
 8020f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8020f7c:	683b      	ldr	r3, [r7, #0]
 8020f7e:	685b      	ldr	r3, [r3, #4]
 8020f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	d003      	beq.n	8020f90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8020f88:	69ba      	ldr	r2, [r7, #24]
 8020f8a:	693b      	ldr	r3, [r7, #16]
 8020f8c:	4313      	orrs	r3, r2
 8020f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8020f90:	4a11      	ldr	r2, [pc, #68]	; (8020fd8 <HAL_GPIO_Init+0x324>)
 8020f92:	69bb      	ldr	r3, [r7, #24]
 8020f94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8020f96:	69fb      	ldr	r3, [r7, #28]
 8020f98:	3301      	adds	r3, #1
 8020f9a:	61fb      	str	r3, [r7, #28]
 8020f9c:	69fb      	ldr	r3, [r7, #28]
 8020f9e:	2b0f      	cmp	r3, #15
 8020fa0:	f67f ae96 	bls.w	8020cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8020fa4:	bf00      	nop
 8020fa6:	bf00      	nop
 8020fa8:	3724      	adds	r7, #36	; 0x24
 8020faa:	46bd      	mov	sp, r7
 8020fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fb0:	4770      	bx	lr
 8020fb2:	bf00      	nop
 8020fb4:	40023800 	.word	0x40023800
 8020fb8:	40013800 	.word	0x40013800
 8020fbc:	40020000 	.word	0x40020000
 8020fc0:	40020400 	.word	0x40020400
 8020fc4:	40020800 	.word	0x40020800
 8020fc8:	40020c00 	.word	0x40020c00
 8020fcc:	40021000 	.word	0x40021000
 8020fd0:	40021400 	.word	0x40021400
 8020fd4:	40021800 	.word	0x40021800
 8020fd8:	40013c00 	.word	0x40013c00

08020fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8020fdc:	b480      	push	{r7}
 8020fde:	b083      	sub	sp, #12
 8020fe0:	af00      	add	r7, sp, #0
 8020fe2:	6078      	str	r0, [r7, #4]
 8020fe4:	460b      	mov	r3, r1
 8020fe6:	807b      	strh	r3, [r7, #2]
 8020fe8:	4613      	mov	r3, r2
 8020fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8020fec:	787b      	ldrb	r3, [r7, #1]
 8020fee:	2b00      	cmp	r3, #0
 8020ff0:	d003      	beq.n	8020ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8020ff2:	887a      	ldrh	r2, [r7, #2]
 8020ff4:	687b      	ldr	r3, [r7, #4]
 8020ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8020ff8:	e003      	b.n	8021002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8020ffa:	887b      	ldrh	r3, [r7, #2]
 8020ffc:	041a      	lsls	r2, r3, #16
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	619a      	str	r2, [r3, #24]
}
 8021002:	bf00      	nop
 8021004:	370c      	adds	r7, #12
 8021006:	46bd      	mov	sp, r7
 8021008:	f85d 7b04 	ldr.w	r7, [sp], #4
 802100c:	4770      	bx	lr

0802100e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 802100e:	b480      	push	{r7}
 8021010:	b085      	sub	sp, #20
 8021012:	af00      	add	r7, sp, #0
 8021014:	6078      	str	r0, [r7, #4]
 8021016:	460b      	mov	r3, r1
 8021018:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 802101a:	687b      	ldr	r3, [r7, #4]
 802101c:	695b      	ldr	r3, [r3, #20]
 802101e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8021020:	887a      	ldrh	r2, [r7, #2]
 8021022:	68fb      	ldr	r3, [r7, #12]
 8021024:	4013      	ands	r3, r2
 8021026:	041a      	lsls	r2, r3, #16
 8021028:	68fb      	ldr	r3, [r7, #12]
 802102a:	43d9      	mvns	r1, r3
 802102c:	887b      	ldrh	r3, [r7, #2]
 802102e:	400b      	ands	r3, r1
 8021030:	431a      	orrs	r2, r3
 8021032:	687b      	ldr	r3, [r7, #4]
 8021034:	619a      	str	r2, [r3, #24]
}
 8021036:	bf00      	nop
 8021038:	3714      	adds	r7, #20
 802103a:	46bd      	mov	sp, r7
 802103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021040:	4770      	bx	lr
	...

08021044 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8021044:	b580      	push	{r7, lr}
 8021046:	b082      	sub	sp, #8
 8021048:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 802104a:	2300      	movs	r3, #0
 802104c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 802104e:	2300      	movs	r3, #0
 8021050:	603b      	str	r3, [r7, #0]
 8021052:	4b20      	ldr	r3, [pc, #128]	; (80210d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8021054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021056:	4a1f      	ldr	r2, [pc, #124]	; (80210d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8021058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802105c:	6413      	str	r3, [r2, #64]	; 0x40
 802105e:	4b1d      	ldr	r3, [pc, #116]	; (80210d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8021060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021066:	603b      	str	r3, [r7, #0]
 8021068:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 802106a:	4b1b      	ldr	r3, [pc, #108]	; (80210d8 <HAL_PWREx_EnableOverDrive+0x94>)
 802106c:	2201      	movs	r2, #1
 802106e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8021070:	f7ff fd0a 	bl	8020a88 <HAL_GetTick>
 8021074:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8021076:	e009      	b.n	802108c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8021078:	f7ff fd06 	bl	8020a88 <HAL_GetTick>
 802107c:	4602      	mov	r2, r0
 802107e:	687b      	ldr	r3, [r7, #4]
 8021080:	1ad3      	subs	r3, r2, r3
 8021082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8021086:	d901      	bls.n	802108c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8021088:	2303      	movs	r3, #3
 802108a:	e01f      	b.n	80210cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 802108c:	4b13      	ldr	r3, [pc, #76]	; (80210dc <HAL_PWREx_EnableOverDrive+0x98>)
 802108e:	685b      	ldr	r3, [r3, #4]
 8021090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021098:	d1ee      	bne.n	8021078 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 802109a:	4b11      	ldr	r3, [pc, #68]	; (80210e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 802109c:	2201      	movs	r2, #1
 802109e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80210a0:	f7ff fcf2 	bl	8020a88 <HAL_GetTick>
 80210a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80210a6:	e009      	b.n	80210bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80210a8:	f7ff fcee 	bl	8020a88 <HAL_GetTick>
 80210ac:	4602      	mov	r2, r0
 80210ae:	687b      	ldr	r3, [r7, #4]
 80210b0:	1ad3      	subs	r3, r2, r3
 80210b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80210b6:	d901      	bls.n	80210bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80210b8:	2303      	movs	r3, #3
 80210ba:	e007      	b.n	80210cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80210bc:	4b07      	ldr	r3, [pc, #28]	; (80210dc <HAL_PWREx_EnableOverDrive+0x98>)
 80210be:	685b      	ldr	r3, [r3, #4]
 80210c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80210c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80210c8:	d1ee      	bne.n	80210a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80210ca:	2300      	movs	r3, #0
}
 80210cc:	4618      	mov	r0, r3
 80210ce:	3708      	adds	r7, #8
 80210d0:	46bd      	mov	sp, r7
 80210d2:	bd80      	pop	{r7, pc}
 80210d4:	40023800 	.word	0x40023800
 80210d8:	420e0040 	.word	0x420e0040
 80210dc:	40007000 	.word	0x40007000
 80210e0:	420e0044 	.word	0x420e0044

080210e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80210e4:	b580      	push	{r7, lr}
 80210e6:	b084      	sub	sp, #16
 80210e8:	af00      	add	r7, sp, #0
 80210ea:	6078      	str	r0, [r7, #4]
 80210ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80210ee:	687b      	ldr	r3, [r7, #4]
 80210f0:	2b00      	cmp	r3, #0
 80210f2:	d101      	bne.n	80210f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80210f4:	2301      	movs	r3, #1
 80210f6:	e0cc      	b.n	8021292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80210f8:	4b68      	ldr	r3, [pc, #416]	; (802129c <HAL_RCC_ClockConfig+0x1b8>)
 80210fa:	681b      	ldr	r3, [r3, #0]
 80210fc:	f003 030f 	and.w	r3, r3, #15
 8021100:	683a      	ldr	r2, [r7, #0]
 8021102:	429a      	cmp	r2, r3
 8021104:	d90c      	bls.n	8021120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021106:	4b65      	ldr	r3, [pc, #404]	; (802129c <HAL_RCC_ClockConfig+0x1b8>)
 8021108:	683a      	ldr	r2, [r7, #0]
 802110a:	b2d2      	uxtb	r2, r2
 802110c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802110e:	4b63      	ldr	r3, [pc, #396]	; (802129c <HAL_RCC_ClockConfig+0x1b8>)
 8021110:	681b      	ldr	r3, [r3, #0]
 8021112:	f003 030f 	and.w	r3, r3, #15
 8021116:	683a      	ldr	r2, [r7, #0]
 8021118:	429a      	cmp	r2, r3
 802111a:	d001      	beq.n	8021120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802111c:	2301      	movs	r3, #1
 802111e:	e0b8      	b.n	8021292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021120:	687b      	ldr	r3, [r7, #4]
 8021122:	681b      	ldr	r3, [r3, #0]
 8021124:	f003 0302 	and.w	r3, r3, #2
 8021128:	2b00      	cmp	r3, #0
 802112a:	d020      	beq.n	802116e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	f003 0304 	and.w	r3, r3, #4
 8021134:	2b00      	cmp	r3, #0
 8021136:	d005      	beq.n	8021144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8021138:	4b59      	ldr	r3, [pc, #356]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 802113a:	689b      	ldr	r3, [r3, #8]
 802113c:	4a58      	ldr	r2, [pc, #352]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 802113e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8021142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	681b      	ldr	r3, [r3, #0]
 8021148:	f003 0308 	and.w	r3, r3, #8
 802114c:	2b00      	cmp	r3, #0
 802114e:	d005      	beq.n	802115c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8021150:	4b53      	ldr	r3, [pc, #332]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021152:	689b      	ldr	r3, [r3, #8]
 8021154:	4a52      	ldr	r2, [pc, #328]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802115a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802115c:	4b50      	ldr	r3, [pc, #320]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 802115e:	689b      	ldr	r3, [r3, #8]
 8021160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021164:	687b      	ldr	r3, [r7, #4]
 8021166:	689b      	ldr	r3, [r3, #8]
 8021168:	494d      	ldr	r1, [pc, #308]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 802116a:	4313      	orrs	r3, r2
 802116c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802116e:	687b      	ldr	r3, [r7, #4]
 8021170:	681b      	ldr	r3, [r3, #0]
 8021172:	f003 0301 	and.w	r3, r3, #1
 8021176:	2b00      	cmp	r3, #0
 8021178:	d044      	beq.n	8021204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802117a:	687b      	ldr	r3, [r7, #4]
 802117c:	685b      	ldr	r3, [r3, #4]
 802117e:	2b01      	cmp	r3, #1
 8021180:	d107      	bne.n	8021192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021182:	4b47      	ldr	r3, [pc, #284]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021184:	681b      	ldr	r3, [r3, #0]
 8021186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802118a:	2b00      	cmp	r3, #0
 802118c:	d119      	bne.n	80211c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802118e:	2301      	movs	r3, #1
 8021190:	e07f      	b.n	8021292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8021192:	687b      	ldr	r3, [r7, #4]
 8021194:	685b      	ldr	r3, [r3, #4]
 8021196:	2b02      	cmp	r3, #2
 8021198:	d003      	beq.n	80211a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802119e:	2b03      	cmp	r3, #3
 80211a0:	d107      	bne.n	80211b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80211a2:	4b3f      	ldr	r3, [pc, #252]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 80211a4:	681b      	ldr	r3, [r3, #0]
 80211a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80211aa:	2b00      	cmp	r3, #0
 80211ac:	d109      	bne.n	80211c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80211ae:	2301      	movs	r3, #1
 80211b0:	e06f      	b.n	8021292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80211b2:	4b3b      	ldr	r3, [pc, #236]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 80211b4:	681b      	ldr	r3, [r3, #0]
 80211b6:	f003 0302 	and.w	r3, r3, #2
 80211ba:	2b00      	cmp	r3, #0
 80211bc:	d101      	bne.n	80211c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80211be:	2301      	movs	r3, #1
 80211c0:	e067      	b.n	8021292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80211c2:	4b37      	ldr	r3, [pc, #220]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 80211c4:	689b      	ldr	r3, [r3, #8]
 80211c6:	f023 0203 	bic.w	r2, r3, #3
 80211ca:	687b      	ldr	r3, [r7, #4]
 80211cc:	685b      	ldr	r3, [r3, #4]
 80211ce:	4934      	ldr	r1, [pc, #208]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 80211d0:	4313      	orrs	r3, r2
 80211d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80211d4:	f7ff fc58 	bl	8020a88 <HAL_GetTick>
 80211d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80211da:	e00a      	b.n	80211f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80211dc:	f7ff fc54 	bl	8020a88 <HAL_GetTick>
 80211e0:	4602      	mov	r2, r0
 80211e2:	68fb      	ldr	r3, [r7, #12]
 80211e4:	1ad3      	subs	r3, r2, r3
 80211e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80211ea:	4293      	cmp	r3, r2
 80211ec:	d901      	bls.n	80211f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80211ee:	2303      	movs	r3, #3
 80211f0:	e04f      	b.n	8021292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80211f2:	4b2b      	ldr	r3, [pc, #172]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 80211f4:	689b      	ldr	r3, [r3, #8]
 80211f6:	f003 020c 	and.w	r2, r3, #12
 80211fa:	687b      	ldr	r3, [r7, #4]
 80211fc:	685b      	ldr	r3, [r3, #4]
 80211fe:	009b      	lsls	r3, r3, #2
 8021200:	429a      	cmp	r2, r3
 8021202:	d1eb      	bne.n	80211dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8021204:	4b25      	ldr	r3, [pc, #148]	; (802129c <HAL_RCC_ClockConfig+0x1b8>)
 8021206:	681b      	ldr	r3, [r3, #0]
 8021208:	f003 030f 	and.w	r3, r3, #15
 802120c:	683a      	ldr	r2, [r7, #0]
 802120e:	429a      	cmp	r2, r3
 8021210:	d20c      	bcs.n	802122c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021212:	4b22      	ldr	r3, [pc, #136]	; (802129c <HAL_RCC_ClockConfig+0x1b8>)
 8021214:	683a      	ldr	r2, [r7, #0]
 8021216:	b2d2      	uxtb	r2, r2
 8021218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802121a:	4b20      	ldr	r3, [pc, #128]	; (802129c <HAL_RCC_ClockConfig+0x1b8>)
 802121c:	681b      	ldr	r3, [r3, #0]
 802121e:	f003 030f 	and.w	r3, r3, #15
 8021222:	683a      	ldr	r2, [r7, #0]
 8021224:	429a      	cmp	r2, r3
 8021226:	d001      	beq.n	802122c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8021228:	2301      	movs	r3, #1
 802122a:	e032      	b.n	8021292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802122c:	687b      	ldr	r3, [r7, #4]
 802122e:	681b      	ldr	r3, [r3, #0]
 8021230:	f003 0304 	and.w	r3, r3, #4
 8021234:	2b00      	cmp	r3, #0
 8021236:	d008      	beq.n	802124a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021238:	4b19      	ldr	r3, [pc, #100]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 802123a:	689b      	ldr	r3, [r3, #8]
 802123c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8021240:	687b      	ldr	r3, [r7, #4]
 8021242:	68db      	ldr	r3, [r3, #12]
 8021244:	4916      	ldr	r1, [pc, #88]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021246:	4313      	orrs	r3, r2
 8021248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	681b      	ldr	r3, [r3, #0]
 802124e:	f003 0308 	and.w	r3, r3, #8
 8021252:	2b00      	cmp	r3, #0
 8021254:	d009      	beq.n	802126a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021256:	4b12      	ldr	r3, [pc, #72]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021258:	689b      	ldr	r3, [r3, #8]
 802125a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802125e:	687b      	ldr	r3, [r7, #4]
 8021260:	691b      	ldr	r3, [r3, #16]
 8021262:	00db      	lsls	r3, r3, #3
 8021264:	490e      	ldr	r1, [pc, #56]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021266:	4313      	orrs	r3, r2
 8021268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802126a:	f000 f855 	bl	8021318 <HAL_RCC_GetSysClockFreq>
 802126e:	4602      	mov	r2, r0
 8021270:	4b0b      	ldr	r3, [pc, #44]	; (80212a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021272:	689b      	ldr	r3, [r3, #8]
 8021274:	091b      	lsrs	r3, r3, #4
 8021276:	f003 030f 	and.w	r3, r3, #15
 802127a:	490a      	ldr	r1, [pc, #40]	; (80212a4 <HAL_RCC_ClockConfig+0x1c0>)
 802127c:	5ccb      	ldrb	r3, [r1, r3]
 802127e:	fa22 f303 	lsr.w	r3, r2, r3
 8021282:	4a09      	ldr	r2, [pc, #36]	; (80212a8 <HAL_RCC_ClockConfig+0x1c4>)
 8021284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8021286:	4b09      	ldr	r3, [pc, #36]	; (80212ac <HAL_RCC_ClockConfig+0x1c8>)
 8021288:	681b      	ldr	r3, [r3, #0]
 802128a:	4618      	mov	r0, r3
 802128c:	f7ff fbb8 	bl	8020a00 <HAL_InitTick>

  return HAL_OK;
 8021290:	2300      	movs	r3, #0
}
 8021292:	4618      	mov	r0, r3
 8021294:	3710      	adds	r7, #16
 8021296:	46bd      	mov	sp, r7
 8021298:	bd80      	pop	{r7, pc}
 802129a:	bf00      	nop
 802129c:	40023c00 	.word	0x40023c00
 80212a0:	40023800 	.word	0x40023800
 80212a4:	08022988 	.word	0x08022988
 80212a8:	20000000 	.word	0x20000000
 80212ac:	20000004 	.word	0x20000004

080212b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80212b0:	b480      	push	{r7}
 80212b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80212b4:	4b03      	ldr	r3, [pc, #12]	; (80212c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80212b6:	681b      	ldr	r3, [r3, #0]
}
 80212b8:	4618      	mov	r0, r3
 80212ba:	46bd      	mov	sp, r7
 80212bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212c0:	4770      	bx	lr
 80212c2:	bf00      	nop
 80212c4:	20000000 	.word	0x20000000

080212c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80212c8:	b580      	push	{r7, lr}
 80212ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80212cc:	f7ff fff0 	bl	80212b0 <HAL_RCC_GetHCLKFreq>
 80212d0:	4602      	mov	r2, r0
 80212d2:	4b05      	ldr	r3, [pc, #20]	; (80212e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80212d4:	689b      	ldr	r3, [r3, #8]
 80212d6:	0a9b      	lsrs	r3, r3, #10
 80212d8:	f003 0307 	and.w	r3, r3, #7
 80212dc:	4903      	ldr	r1, [pc, #12]	; (80212ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80212de:	5ccb      	ldrb	r3, [r1, r3]
 80212e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80212e4:	4618      	mov	r0, r3
 80212e6:	bd80      	pop	{r7, pc}
 80212e8:	40023800 	.word	0x40023800
 80212ec:	08022998 	.word	0x08022998

080212f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80212f0:	b580      	push	{r7, lr}
 80212f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80212f4:	f7ff ffdc 	bl	80212b0 <HAL_RCC_GetHCLKFreq>
 80212f8:	4602      	mov	r2, r0
 80212fa:	4b05      	ldr	r3, [pc, #20]	; (8021310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80212fc:	689b      	ldr	r3, [r3, #8]
 80212fe:	0b5b      	lsrs	r3, r3, #13
 8021300:	f003 0307 	and.w	r3, r3, #7
 8021304:	4903      	ldr	r1, [pc, #12]	; (8021314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8021306:	5ccb      	ldrb	r3, [r1, r3]
 8021308:	fa22 f303 	lsr.w	r3, r2, r3
}
 802130c:	4618      	mov	r0, r3
 802130e:	bd80      	pop	{r7, pc}
 8021310:	40023800 	.word	0x40023800
 8021314:	08022998 	.word	0x08022998

08021318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8021318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802131c:	b088      	sub	sp, #32
 802131e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8021320:	2300      	movs	r3, #0
 8021322:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8021324:	2300      	movs	r3, #0
 8021326:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8021328:	2300      	movs	r3, #0
 802132a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 802132c:	2300      	movs	r3, #0
 802132e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8021330:	2300      	movs	r3, #0
 8021332:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8021334:	4bce      	ldr	r3, [pc, #824]	; (8021670 <HAL_RCC_GetSysClockFreq+0x358>)
 8021336:	689b      	ldr	r3, [r3, #8]
 8021338:	f003 030c 	and.w	r3, r3, #12
 802133c:	2b0c      	cmp	r3, #12
 802133e:	f200 818d 	bhi.w	802165c <HAL_RCC_GetSysClockFreq+0x344>
 8021342:	a201      	add	r2, pc, #4	; (adr r2, 8021348 <HAL_RCC_GetSysClockFreq+0x30>)
 8021344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021348:	0802137d 	.word	0x0802137d
 802134c:	0802165d 	.word	0x0802165d
 8021350:	0802165d 	.word	0x0802165d
 8021354:	0802165d 	.word	0x0802165d
 8021358:	08021383 	.word	0x08021383
 802135c:	0802165d 	.word	0x0802165d
 8021360:	0802165d 	.word	0x0802165d
 8021364:	0802165d 	.word	0x0802165d
 8021368:	08021389 	.word	0x08021389
 802136c:	0802165d 	.word	0x0802165d
 8021370:	0802165d 	.word	0x0802165d
 8021374:	0802165d 	.word	0x0802165d
 8021378:	080214fd 	.word	0x080214fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802137c:	4bbd      	ldr	r3, [pc, #756]	; (8021674 <HAL_RCC_GetSysClockFreq+0x35c>)
 802137e:	61bb      	str	r3, [r7, #24]
       break;
 8021380:	e16f      	b.n	8021662 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8021382:	4bbd      	ldr	r3, [pc, #756]	; (8021678 <HAL_RCC_GetSysClockFreq+0x360>)
 8021384:	61bb      	str	r3, [r7, #24]
      break;
 8021386:	e16c      	b.n	8021662 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8021388:	4bb9      	ldr	r3, [pc, #740]	; (8021670 <HAL_RCC_GetSysClockFreq+0x358>)
 802138a:	685b      	ldr	r3, [r3, #4]
 802138c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8021390:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8021392:	4bb7      	ldr	r3, [pc, #732]	; (8021670 <HAL_RCC_GetSysClockFreq+0x358>)
 8021394:	685b      	ldr	r3, [r3, #4]
 8021396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802139a:	2b00      	cmp	r3, #0
 802139c:	d053      	beq.n	8021446 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802139e:	4bb4      	ldr	r3, [pc, #720]	; (8021670 <HAL_RCC_GetSysClockFreq+0x358>)
 80213a0:	685b      	ldr	r3, [r3, #4]
 80213a2:	099b      	lsrs	r3, r3, #6
 80213a4:	461a      	mov	r2, r3
 80213a6:	f04f 0300 	mov.w	r3, #0
 80213aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80213ae:	f04f 0100 	mov.w	r1, #0
 80213b2:	ea02 0400 	and.w	r4, r2, r0
 80213b6:	603c      	str	r4, [r7, #0]
 80213b8:	400b      	ands	r3, r1
 80213ba:	607b      	str	r3, [r7, #4]
 80213bc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80213c0:	4620      	mov	r0, r4
 80213c2:	4629      	mov	r1, r5
 80213c4:	f04f 0200 	mov.w	r2, #0
 80213c8:	f04f 0300 	mov.w	r3, #0
 80213cc:	014b      	lsls	r3, r1, #5
 80213ce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80213d2:	0142      	lsls	r2, r0, #5
 80213d4:	4610      	mov	r0, r2
 80213d6:	4619      	mov	r1, r3
 80213d8:	4623      	mov	r3, r4
 80213da:	1ac0      	subs	r0, r0, r3
 80213dc:	462b      	mov	r3, r5
 80213de:	eb61 0103 	sbc.w	r1, r1, r3
 80213e2:	f04f 0200 	mov.w	r2, #0
 80213e6:	f04f 0300 	mov.w	r3, #0
 80213ea:	018b      	lsls	r3, r1, #6
 80213ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80213f0:	0182      	lsls	r2, r0, #6
 80213f2:	1a12      	subs	r2, r2, r0
 80213f4:	eb63 0301 	sbc.w	r3, r3, r1
 80213f8:	f04f 0000 	mov.w	r0, #0
 80213fc:	f04f 0100 	mov.w	r1, #0
 8021400:	00d9      	lsls	r1, r3, #3
 8021402:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8021406:	00d0      	lsls	r0, r2, #3
 8021408:	4602      	mov	r2, r0
 802140a:	460b      	mov	r3, r1
 802140c:	4621      	mov	r1, r4
 802140e:	1852      	adds	r2, r2, r1
 8021410:	4629      	mov	r1, r5
 8021412:	eb43 0101 	adc.w	r1, r3, r1
 8021416:	460b      	mov	r3, r1
 8021418:	f04f 0000 	mov.w	r0, #0
 802141c:	f04f 0100 	mov.w	r1, #0
 8021420:	0259      	lsls	r1, r3, #9
 8021422:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8021426:	0250      	lsls	r0, r2, #9
 8021428:	4602      	mov	r2, r0
 802142a:	460b      	mov	r3, r1
 802142c:	4610      	mov	r0, r2
 802142e:	4619      	mov	r1, r3
 8021430:	697b      	ldr	r3, [r7, #20]
 8021432:	461a      	mov	r2, r3
 8021434:	f04f 0300 	mov.w	r3, #0
 8021438:	f7fe ff42 	bl	80202c0 <__aeabi_uldivmod>
 802143c:	4602      	mov	r2, r0
 802143e:	460b      	mov	r3, r1
 8021440:	4613      	mov	r3, r2
 8021442:	61fb      	str	r3, [r7, #28]
 8021444:	e04c      	b.n	80214e0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8021446:	4b8a      	ldr	r3, [pc, #552]	; (8021670 <HAL_RCC_GetSysClockFreq+0x358>)
 8021448:	685b      	ldr	r3, [r3, #4]
 802144a:	099b      	lsrs	r3, r3, #6
 802144c:	461a      	mov	r2, r3
 802144e:	f04f 0300 	mov.w	r3, #0
 8021452:	f240 10ff 	movw	r0, #511	; 0x1ff
 8021456:	f04f 0100 	mov.w	r1, #0
 802145a:	ea02 0a00 	and.w	sl, r2, r0
 802145e:	ea03 0b01 	and.w	fp, r3, r1
 8021462:	4650      	mov	r0, sl
 8021464:	4659      	mov	r1, fp
 8021466:	f04f 0200 	mov.w	r2, #0
 802146a:	f04f 0300 	mov.w	r3, #0
 802146e:	014b      	lsls	r3, r1, #5
 8021470:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021474:	0142      	lsls	r2, r0, #5
 8021476:	4610      	mov	r0, r2
 8021478:	4619      	mov	r1, r3
 802147a:	ebb0 000a 	subs.w	r0, r0, sl
 802147e:	eb61 010b 	sbc.w	r1, r1, fp
 8021482:	f04f 0200 	mov.w	r2, #0
 8021486:	f04f 0300 	mov.w	r3, #0
 802148a:	018b      	lsls	r3, r1, #6
 802148c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8021490:	0182      	lsls	r2, r0, #6
 8021492:	1a12      	subs	r2, r2, r0
 8021494:	eb63 0301 	sbc.w	r3, r3, r1
 8021498:	f04f 0000 	mov.w	r0, #0
 802149c:	f04f 0100 	mov.w	r1, #0
 80214a0:	00d9      	lsls	r1, r3, #3
 80214a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80214a6:	00d0      	lsls	r0, r2, #3
 80214a8:	4602      	mov	r2, r0
 80214aa:	460b      	mov	r3, r1
 80214ac:	eb12 020a 	adds.w	r2, r2, sl
 80214b0:	eb43 030b 	adc.w	r3, r3, fp
 80214b4:	f04f 0000 	mov.w	r0, #0
 80214b8:	f04f 0100 	mov.w	r1, #0
 80214bc:	0299      	lsls	r1, r3, #10
 80214be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80214c2:	0290      	lsls	r0, r2, #10
 80214c4:	4602      	mov	r2, r0
 80214c6:	460b      	mov	r3, r1
 80214c8:	4610      	mov	r0, r2
 80214ca:	4619      	mov	r1, r3
 80214cc:	697b      	ldr	r3, [r7, #20]
 80214ce:	461a      	mov	r2, r3
 80214d0:	f04f 0300 	mov.w	r3, #0
 80214d4:	f7fe fef4 	bl	80202c0 <__aeabi_uldivmod>
 80214d8:	4602      	mov	r2, r0
 80214da:	460b      	mov	r3, r1
 80214dc:	4613      	mov	r3, r2
 80214de:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80214e0:	4b63      	ldr	r3, [pc, #396]	; (8021670 <HAL_RCC_GetSysClockFreq+0x358>)
 80214e2:	685b      	ldr	r3, [r3, #4]
 80214e4:	0c1b      	lsrs	r3, r3, #16
 80214e6:	f003 0303 	and.w	r3, r3, #3
 80214ea:	3301      	adds	r3, #1
 80214ec:	005b      	lsls	r3, r3, #1
 80214ee:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80214f0:	69fa      	ldr	r2, [r7, #28]
 80214f2:	693b      	ldr	r3, [r7, #16]
 80214f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80214f8:	61bb      	str	r3, [r7, #24]
      break;
 80214fa:	e0b2      	b.n	8021662 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80214fc:	4b5c      	ldr	r3, [pc, #368]	; (8021670 <HAL_RCC_GetSysClockFreq+0x358>)
 80214fe:	685b      	ldr	r3, [r3, #4]
 8021500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8021504:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8021506:	4b5a      	ldr	r3, [pc, #360]	; (8021670 <HAL_RCC_GetSysClockFreq+0x358>)
 8021508:	685b      	ldr	r3, [r3, #4]
 802150a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802150e:	2b00      	cmp	r3, #0
 8021510:	d04d      	beq.n	80215ae <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8021512:	4b57      	ldr	r3, [pc, #348]	; (8021670 <HAL_RCC_GetSysClockFreq+0x358>)
 8021514:	685b      	ldr	r3, [r3, #4]
 8021516:	099b      	lsrs	r3, r3, #6
 8021518:	461a      	mov	r2, r3
 802151a:	f04f 0300 	mov.w	r3, #0
 802151e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8021522:	f04f 0100 	mov.w	r1, #0
 8021526:	ea02 0800 	and.w	r8, r2, r0
 802152a:	ea03 0901 	and.w	r9, r3, r1
 802152e:	4640      	mov	r0, r8
 8021530:	4649      	mov	r1, r9
 8021532:	f04f 0200 	mov.w	r2, #0
 8021536:	f04f 0300 	mov.w	r3, #0
 802153a:	014b      	lsls	r3, r1, #5
 802153c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021540:	0142      	lsls	r2, r0, #5
 8021542:	4610      	mov	r0, r2
 8021544:	4619      	mov	r1, r3
 8021546:	ebb0 0008 	subs.w	r0, r0, r8
 802154a:	eb61 0109 	sbc.w	r1, r1, r9
 802154e:	f04f 0200 	mov.w	r2, #0
 8021552:	f04f 0300 	mov.w	r3, #0
 8021556:	018b      	lsls	r3, r1, #6
 8021558:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 802155c:	0182      	lsls	r2, r0, #6
 802155e:	1a12      	subs	r2, r2, r0
 8021560:	eb63 0301 	sbc.w	r3, r3, r1
 8021564:	f04f 0000 	mov.w	r0, #0
 8021568:	f04f 0100 	mov.w	r1, #0
 802156c:	00d9      	lsls	r1, r3, #3
 802156e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8021572:	00d0      	lsls	r0, r2, #3
 8021574:	4602      	mov	r2, r0
 8021576:	460b      	mov	r3, r1
 8021578:	eb12 0208 	adds.w	r2, r2, r8
 802157c:	eb43 0309 	adc.w	r3, r3, r9
 8021580:	f04f 0000 	mov.w	r0, #0
 8021584:	f04f 0100 	mov.w	r1, #0
 8021588:	0259      	lsls	r1, r3, #9
 802158a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 802158e:	0250      	lsls	r0, r2, #9
 8021590:	4602      	mov	r2, r0
 8021592:	460b      	mov	r3, r1
 8021594:	4610      	mov	r0, r2
 8021596:	4619      	mov	r1, r3
 8021598:	697b      	ldr	r3, [r7, #20]
 802159a:	461a      	mov	r2, r3
 802159c:	f04f 0300 	mov.w	r3, #0
 80215a0:	f7fe fe8e 	bl	80202c0 <__aeabi_uldivmod>
 80215a4:	4602      	mov	r2, r0
 80215a6:	460b      	mov	r3, r1
 80215a8:	4613      	mov	r3, r2
 80215aa:	61fb      	str	r3, [r7, #28]
 80215ac:	e04a      	b.n	8021644 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80215ae:	4b30      	ldr	r3, [pc, #192]	; (8021670 <HAL_RCC_GetSysClockFreq+0x358>)
 80215b0:	685b      	ldr	r3, [r3, #4]
 80215b2:	099b      	lsrs	r3, r3, #6
 80215b4:	461a      	mov	r2, r3
 80215b6:	f04f 0300 	mov.w	r3, #0
 80215ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80215be:	f04f 0100 	mov.w	r1, #0
 80215c2:	ea02 0400 	and.w	r4, r2, r0
 80215c6:	ea03 0501 	and.w	r5, r3, r1
 80215ca:	4620      	mov	r0, r4
 80215cc:	4629      	mov	r1, r5
 80215ce:	f04f 0200 	mov.w	r2, #0
 80215d2:	f04f 0300 	mov.w	r3, #0
 80215d6:	014b      	lsls	r3, r1, #5
 80215d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80215dc:	0142      	lsls	r2, r0, #5
 80215de:	4610      	mov	r0, r2
 80215e0:	4619      	mov	r1, r3
 80215e2:	1b00      	subs	r0, r0, r4
 80215e4:	eb61 0105 	sbc.w	r1, r1, r5
 80215e8:	f04f 0200 	mov.w	r2, #0
 80215ec:	f04f 0300 	mov.w	r3, #0
 80215f0:	018b      	lsls	r3, r1, #6
 80215f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80215f6:	0182      	lsls	r2, r0, #6
 80215f8:	1a12      	subs	r2, r2, r0
 80215fa:	eb63 0301 	sbc.w	r3, r3, r1
 80215fe:	f04f 0000 	mov.w	r0, #0
 8021602:	f04f 0100 	mov.w	r1, #0
 8021606:	00d9      	lsls	r1, r3, #3
 8021608:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802160c:	00d0      	lsls	r0, r2, #3
 802160e:	4602      	mov	r2, r0
 8021610:	460b      	mov	r3, r1
 8021612:	1912      	adds	r2, r2, r4
 8021614:	eb45 0303 	adc.w	r3, r5, r3
 8021618:	f04f 0000 	mov.w	r0, #0
 802161c:	f04f 0100 	mov.w	r1, #0
 8021620:	0299      	lsls	r1, r3, #10
 8021622:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8021626:	0290      	lsls	r0, r2, #10
 8021628:	4602      	mov	r2, r0
 802162a:	460b      	mov	r3, r1
 802162c:	4610      	mov	r0, r2
 802162e:	4619      	mov	r1, r3
 8021630:	697b      	ldr	r3, [r7, #20]
 8021632:	461a      	mov	r2, r3
 8021634:	f04f 0300 	mov.w	r3, #0
 8021638:	f7fe fe42 	bl	80202c0 <__aeabi_uldivmod>
 802163c:	4602      	mov	r2, r0
 802163e:	460b      	mov	r3, r1
 8021640:	4613      	mov	r3, r2
 8021642:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8021644:	4b0a      	ldr	r3, [pc, #40]	; (8021670 <HAL_RCC_GetSysClockFreq+0x358>)
 8021646:	685b      	ldr	r3, [r3, #4]
 8021648:	0f1b      	lsrs	r3, r3, #28
 802164a:	f003 0307 	and.w	r3, r3, #7
 802164e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8021650:	69fa      	ldr	r2, [r7, #28]
 8021652:	68fb      	ldr	r3, [r7, #12]
 8021654:	fbb2 f3f3 	udiv	r3, r2, r3
 8021658:	61bb      	str	r3, [r7, #24]
      break;
 802165a:	e002      	b.n	8021662 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802165c:	4b05      	ldr	r3, [pc, #20]	; (8021674 <HAL_RCC_GetSysClockFreq+0x35c>)
 802165e:	61bb      	str	r3, [r7, #24]
      break;
 8021660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8021662:	69bb      	ldr	r3, [r7, #24]
}
 8021664:	4618      	mov	r0, r3
 8021666:	3720      	adds	r7, #32
 8021668:	46bd      	mov	sp, r7
 802166a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802166e:	bf00      	nop
 8021670:	40023800 	.word	0x40023800
 8021674:	00f42400 	.word	0x00f42400
 8021678:	007a1200 	.word	0x007a1200

0802167c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802167c:	b580      	push	{r7, lr}
 802167e:	b086      	sub	sp, #24
 8021680:	af00      	add	r7, sp, #0
 8021682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	2b00      	cmp	r3, #0
 8021688:	d101      	bne.n	802168e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802168a:	2301      	movs	r3, #1
 802168c:	e28d      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802168e:	687b      	ldr	r3, [r7, #4]
 8021690:	681b      	ldr	r3, [r3, #0]
 8021692:	f003 0301 	and.w	r3, r3, #1
 8021696:	2b00      	cmp	r3, #0
 8021698:	f000 8083 	beq.w	80217a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 802169c:	4b94      	ldr	r3, [pc, #592]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 802169e:	689b      	ldr	r3, [r3, #8]
 80216a0:	f003 030c 	and.w	r3, r3, #12
 80216a4:	2b04      	cmp	r3, #4
 80216a6:	d019      	beq.n	80216dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80216a8:	4b91      	ldr	r3, [pc, #580]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 80216aa:	689b      	ldr	r3, [r3, #8]
 80216ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80216b0:	2b08      	cmp	r3, #8
 80216b2:	d106      	bne.n	80216c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80216b4:	4b8e      	ldr	r3, [pc, #568]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 80216b6:	685b      	ldr	r3, [r3, #4]
 80216b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80216bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80216c0:	d00c      	beq.n	80216dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80216c2:	4b8b      	ldr	r3, [pc, #556]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 80216c4:	689b      	ldr	r3, [r3, #8]
 80216c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80216ca:	2b0c      	cmp	r3, #12
 80216cc:	d112      	bne.n	80216f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80216ce:	4b88      	ldr	r3, [pc, #544]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 80216d0:	685b      	ldr	r3, [r3, #4]
 80216d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80216d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80216da:	d10b      	bne.n	80216f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80216dc:	4b84      	ldr	r3, [pc, #528]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 80216de:	681b      	ldr	r3, [r3, #0]
 80216e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80216e4:	2b00      	cmp	r3, #0
 80216e6:	d05b      	beq.n	80217a0 <HAL_RCC_OscConfig+0x124>
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	685b      	ldr	r3, [r3, #4]
 80216ec:	2b00      	cmp	r3, #0
 80216ee:	d157      	bne.n	80217a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80216f0:	2301      	movs	r3, #1
 80216f2:	e25a      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	685b      	ldr	r3, [r3, #4]
 80216f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80216fc:	d106      	bne.n	802170c <HAL_RCC_OscConfig+0x90>
 80216fe:	4b7c      	ldr	r3, [pc, #496]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 8021700:	681b      	ldr	r3, [r3, #0]
 8021702:	4a7b      	ldr	r2, [pc, #492]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 8021704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021708:	6013      	str	r3, [r2, #0]
 802170a:	e01d      	b.n	8021748 <HAL_RCC_OscConfig+0xcc>
 802170c:	687b      	ldr	r3, [r7, #4]
 802170e:	685b      	ldr	r3, [r3, #4]
 8021710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8021714:	d10c      	bne.n	8021730 <HAL_RCC_OscConfig+0xb4>
 8021716:	4b76      	ldr	r3, [pc, #472]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 8021718:	681b      	ldr	r3, [r3, #0]
 802171a:	4a75      	ldr	r2, [pc, #468]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 802171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021720:	6013      	str	r3, [r2, #0]
 8021722:	4b73      	ldr	r3, [pc, #460]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 8021724:	681b      	ldr	r3, [r3, #0]
 8021726:	4a72      	ldr	r2, [pc, #456]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 8021728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802172c:	6013      	str	r3, [r2, #0]
 802172e:	e00b      	b.n	8021748 <HAL_RCC_OscConfig+0xcc>
 8021730:	4b6f      	ldr	r3, [pc, #444]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 8021732:	681b      	ldr	r3, [r3, #0]
 8021734:	4a6e      	ldr	r2, [pc, #440]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 8021736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802173a:	6013      	str	r3, [r2, #0]
 802173c:	4b6c      	ldr	r3, [pc, #432]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 802173e:	681b      	ldr	r3, [r3, #0]
 8021740:	4a6b      	ldr	r2, [pc, #428]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 8021742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8021748:	687b      	ldr	r3, [r7, #4]
 802174a:	685b      	ldr	r3, [r3, #4]
 802174c:	2b00      	cmp	r3, #0
 802174e:	d013      	beq.n	8021778 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021750:	f7ff f99a 	bl	8020a88 <HAL_GetTick>
 8021754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021756:	e008      	b.n	802176a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8021758:	f7ff f996 	bl	8020a88 <HAL_GetTick>
 802175c:	4602      	mov	r2, r0
 802175e:	693b      	ldr	r3, [r7, #16]
 8021760:	1ad3      	subs	r3, r2, r3
 8021762:	2b64      	cmp	r3, #100	; 0x64
 8021764:	d901      	bls.n	802176a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8021766:	2303      	movs	r3, #3
 8021768:	e21f      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802176a:	4b61      	ldr	r3, [pc, #388]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021772:	2b00      	cmp	r3, #0
 8021774:	d0f0      	beq.n	8021758 <HAL_RCC_OscConfig+0xdc>
 8021776:	e014      	b.n	80217a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021778:	f7ff f986 	bl	8020a88 <HAL_GetTick>
 802177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802177e:	e008      	b.n	8021792 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8021780:	f7ff f982 	bl	8020a88 <HAL_GetTick>
 8021784:	4602      	mov	r2, r0
 8021786:	693b      	ldr	r3, [r7, #16]
 8021788:	1ad3      	subs	r3, r2, r3
 802178a:	2b64      	cmp	r3, #100	; 0x64
 802178c:	d901      	bls.n	8021792 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 802178e:	2303      	movs	r3, #3
 8021790:	e20b      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021792:	4b57      	ldr	r3, [pc, #348]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 8021794:	681b      	ldr	r3, [r3, #0]
 8021796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802179a:	2b00      	cmp	r3, #0
 802179c:	d1f0      	bne.n	8021780 <HAL_RCC_OscConfig+0x104>
 802179e:	e000      	b.n	80217a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80217a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80217a2:	687b      	ldr	r3, [r7, #4]
 80217a4:	681b      	ldr	r3, [r3, #0]
 80217a6:	f003 0302 	and.w	r3, r3, #2
 80217aa:	2b00      	cmp	r3, #0
 80217ac:	d06f      	beq.n	802188e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80217ae:	4b50      	ldr	r3, [pc, #320]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 80217b0:	689b      	ldr	r3, [r3, #8]
 80217b2:	f003 030c 	and.w	r3, r3, #12
 80217b6:	2b00      	cmp	r3, #0
 80217b8:	d017      	beq.n	80217ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80217ba:	4b4d      	ldr	r3, [pc, #308]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 80217bc:	689b      	ldr	r3, [r3, #8]
 80217be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80217c2:	2b08      	cmp	r3, #8
 80217c4:	d105      	bne.n	80217d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80217c6:	4b4a      	ldr	r3, [pc, #296]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 80217c8:	685b      	ldr	r3, [r3, #4]
 80217ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80217ce:	2b00      	cmp	r3, #0
 80217d0:	d00b      	beq.n	80217ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80217d2:	4b47      	ldr	r3, [pc, #284]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 80217d4:	689b      	ldr	r3, [r3, #8]
 80217d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80217da:	2b0c      	cmp	r3, #12
 80217dc:	d11c      	bne.n	8021818 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80217de:	4b44      	ldr	r3, [pc, #272]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 80217e0:	685b      	ldr	r3, [r3, #4]
 80217e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80217e6:	2b00      	cmp	r3, #0
 80217e8:	d116      	bne.n	8021818 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80217ea:	4b41      	ldr	r3, [pc, #260]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 80217ec:	681b      	ldr	r3, [r3, #0]
 80217ee:	f003 0302 	and.w	r3, r3, #2
 80217f2:	2b00      	cmp	r3, #0
 80217f4:	d005      	beq.n	8021802 <HAL_RCC_OscConfig+0x186>
 80217f6:	687b      	ldr	r3, [r7, #4]
 80217f8:	68db      	ldr	r3, [r3, #12]
 80217fa:	2b01      	cmp	r3, #1
 80217fc:	d001      	beq.n	8021802 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80217fe:	2301      	movs	r3, #1
 8021800:	e1d3      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021802:	4b3b      	ldr	r3, [pc, #236]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 8021804:	681b      	ldr	r3, [r3, #0]
 8021806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802180a:	687b      	ldr	r3, [r7, #4]
 802180c:	691b      	ldr	r3, [r3, #16]
 802180e:	00db      	lsls	r3, r3, #3
 8021810:	4937      	ldr	r1, [pc, #220]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 8021812:	4313      	orrs	r3, r2
 8021814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021816:	e03a      	b.n	802188e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8021818:	687b      	ldr	r3, [r7, #4]
 802181a:	68db      	ldr	r3, [r3, #12]
 802181c:	2b00      	cmp	r3, #0
 802181e:	d020      	beq.n	8021862 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021820:	4b34      	ldr	r3, [pc, #208]	; (80218f4 <HAL_RCC_OscConfig+0x278>)
 8021822:	2201      	movs	r2, #1
 8021824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021826:	f7ff f92f 	bl	8020a88 <HAL_GetTick>
 802182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802182c:	e008      	b.n	8021840 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802182e:	f7ff f92b 	bl	8020a88 <HAL_GetTick>
 8021832:	4602      	mov	r2, r0
 8021834:	693b      	ldr	r3, [r7, #16]
 8021836:	1ad3      	subs	r3, r2, r3
 8021838:	2b02      	cmp	r3, #2
 802183a:	d901      	bls.n	8021840 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 802183c:	2303      	movs	r3, #3
 802183e:	e1b4      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021840:	4b2b      	ldr	r3, [pc, #172]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 8021842:	681b      	ldr	r3, [r3, #0]
 8021844:	f003 0302 	and.w	r3, r3, #2
 8021848:	2b00      	cmp	r3, #0
 802184a:	d0f0      	beq.n	802182e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802184c:	4b28      	ldr	r3, [pc, #160]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 802184e:	681b      	ldr	r3, [r3, #0]
 8021850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8021854:	687b      	ldr	r3, [r7, #4]
 8021856:	691b      	ldr	r3, [r3, #16]
 8021858:	00db      	lsls	r3, r3, #3
 802185a:	4925      	ldr	r1, [pc, #148]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 802185c:	4313      	orrs	r3, r2
 802185e:	600b      	str	r3, [r1, #0]
 8021860:	e015      	b.n	802188e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8021862:	4b24      	ldr	r3, [pc, #144]	; (80218f4 <HAL_RCC_OscConfig+0x278>)
 8021864:	2200      	movs	r2, #0
 8021866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021868:	f7ff f90e 	bl	8020a88 <HAL_GetTick>
 802186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802186e:	e008      	b.n	8021882 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021870:	f7ff f90a 	bl	8020a88 <HAL_GetTick>
 8021874:	4602      	mov	r2, r0
 8021876:	693b      	ldr	r3, [r7, #16]
 8021878:	1ad3      	subs	r3, r2, r3
 802187a:	2b02      	cmp	r3, #2
 802187c:	d901      	bls.n	8021882 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 802187e:	2303      	movs	r3, #3
 8021880:	e193      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021882:	4b1b      	ldr	r3, [pc, #108]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 8021884:	681b      	ldr	r3, [r3, #0]
 8021886:	f003 0302 	and.w	r3, r3, #2
 802188a:	2b00      	cmp	r3, #0
 802188c:	d1f0      	bne.n	8021870 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802188e:	687b      	ldr	r3, [r7, #4]
 8021890:	681b      	ldr	r3, [r3, #0]
 8021892:	f003 0308 	and.w	r3, r3, #8
 8021896:	2b00      	cmp	r3, #0
 8021898:	d036      	beq.n	8021908 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802189a:	687b      	ldr	r3, [r7, #4]
 802189c:	695b      	ldr	r3, [r3, #20]
 802189e:	2b00      	cmp	r3, #0
 80218a0:	d016      	beq.n	80218d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80218a2:	4b15      	ldr	r3, [pc, #84]	; (80218f8 <HAL_RCC_OscConfig+0x27c>)
 80218a4:	2201      	movs	r2, #1
 80218a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80218a8:	f7ff f8ee 	bl	8020a88 <HAL_GetTick>
 80218ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80218ae:	e008      	b.n	80218c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80218b0:	f7ff f8ea 	bl	8020a88 <HAL_GetTick>
 80218b4:	4602      	mov	r2, r0
 80218b6:	693b      	ldr	r3, [r7, #16]
 80218b8:	1ad3      	subs	r3, r2, r3
 80218ba:	2b02      	cmp	r3, #2
 80218bc:	d901      	bls.n	80218c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80218be:	2303      	movs	r3, #3
 80218c0:	e173      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80218c2:	4b0b      	ldr	r3, [pc, #44]	; (80218f0 <HAL_RCC_OscConfig+0x274>)
 80218c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80218c6:	f003 0302 	and.w	r3, r3, #2
 80218ca:	2b00      	cmp	r3, #0
 80218cc:	d0f0      	beq.n	80218b0 <HAL_RCC_OscConfig+0x234>
 80218ce:	e01b      	b.n	8021908 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80218d0:	4b09      	ldr	r3, [pc, #36]	; (80218f8 <HAL_RCC_OscConfig+0x27c>)
 80218d2:	2200      	movs	r2, #0
 80218d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80218d6:	f7ff f8d7 	bl	8020a88 <HAL_GetTick>
 80218da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80218dc:	e00e      	b.n	80218fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80218de:	f7ff f8d3 	bl	8020a88 <HAL_GetTick>
 80218e2:	4602      	mov	r2, r0
 80218e4:	693b      	ldr	r3, [r7, #16]
 80218e6:	1ad3      	subs	r3, r2, r3
 80218e8:	2b02      	cmp	r3, #2
 80218ea:	d907      	bls.n	80218fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80218ec:	2303      	movs	r3, #3
 80218ee:	e15c      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
 80218f0:	40023800 	.word	0x40023800
 80218f4:	42470000 	.word	0x42470000
 80218f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80218fc:	4b8a      	ldr	r3, [pc, #552]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 80218fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021900:	f003 0302 	and.w	r3, r3, #2
 8021904:	2b00      	cmp	r3, #0
 8021906:	d1ea      	bne.n	80218de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021908:	687b      	ldr	r3, [r7, #4]
 802190a:	681b      	ldr	r3, [r3, #0]
 802190c:	f003 0304 	and.w	r3, r3, #4
 8021910:	2b00      	cmp	r3, #0
 8021912:	f000 8097 	beq.w	8021a44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021916:	2300      	movs	r3, #0
 8021918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802191a:	4b83      	ldr	r3, [pc, #524]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 802191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021922:	2b00      	cmp	r3, #0
 8021924:	d10f      	bne.n	8021946 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021926:	2300      	movs	r3, #0
 8021928:	60bb      	str	r3, [r7, #8]
 802192a:	4b7f      	ldr	r3, [pc, #508]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 802192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802192e:	4a7e      	ldr	r2, [pc, #504]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 8021930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021934:	6413      	str	r3, [r2, #64]	; 0x40
 8021936:	4b7c      	ldr	r3, [pc, #496]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 8021938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802193e:	60bb      	str	r3, [r7, #8]
 8021940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8021942:	2301      	movs	r3, #1
 8021944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021946:	4b79      	ldr	r3, [pc, #484]	; (8021b2c <HAL_RCC_OscConfig+0x4b0>)
 8021948:	681b      	ldr	r3, [r3, #0]
 802194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802194e:	2b00      	cmp	r3, #0
 8021950:	d118      	bne.n	8021984 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8021952:	4b76      	ldr	r3, [pc, #472]	; (8021b2c <HAL_RCC_OscConfig+0x4b0>)
 8021954:	681b      	ldr	r3, [r3, #0]
 8021956:	4a75      	ldr	r2, [pc, #468]	; (8021b2c <HAL_RCC_OscConfig+0x4b0>)
 8021958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802195c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802195e:	f7ff f893 	bl	8020a88 <HAL_GetTick>
 8021962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021964:	e008      	b.n	8021978 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021966:	f7ff f88f 	bl	8020a88 <HAL_GetTick>
 802196a:	4602      	mov	r2, r0
 802196c:	693b      	ldr	r3, [r7, #16]
 802196e:	1ad3      	subs	r3, r2, r3
 8021970:	2b02      	cmp	r3, #2
 8021972:	d901      	bls.n	8021978 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8021974:	2303      	movs	r3, #3
 8021976:	e118      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021978:	4b6c      	ldr	r3, [pc, #432]	; (8021b2c <HAL_RCC_OscConfig+0x4b0>)
 802197a:	681b      	ldr	r3, [r3, #0]
 802197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021980:	2b00      	cmp	r3, #0
 8021982:	d0f0      	beq.n	8021966 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021984:	687b      	ldr	r3, [r7, #4]
 8021986:	689b      	ldr	r3, [r3, #8]
 8021988:	2b01      	cmp	r3, #1
 802198a:	d106      	bne.n	802199a <HAL_RCC_OscConfig+0x31e>
 802198c:	4b66      	ldr	r3, [pc, #408]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 802198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021990:	4a65      	ldr	r2, [pc, #404]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 8021992:	f043 0301 	orr.w	r3, r3, #1
 8021996:	6713      	str	r3, [r2, #112]	; 0x70
 8021998:	e01c      	b.n	80219d4 <HAL_RCC_OscConfig+0x358>
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	689b      	ldr	r3, [r3, #8]
 802199e:	2b05      	cmp	r3, #5
 80219a0:	d10c      	bne.n	80219bc <HAL_RCC_OscConfig+0x340>
 80219a2:	4b61      	ldr	r3, [pc, #388]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 80219a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80219a6:	4a60      	ldr	r2, [pc, #384]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 80219a8:	f043 0304 	orr.w	r3, r3, #4
 80219ac:	6713      	str	r3, [r2, #112]	; 0x70
 80219ae:	4b5e      	ldr	r3, [pc, #376]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 80219b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80219b2:	4a5d      	ldr	r2, [pc, #372]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 80219b4:	f043 0301 	orr.w	r3, r3, #1
 80219b8:	6713      	str	r3, [r2, #112]	; 0x70
 80219ba:	e00b      	b.n	80219d4 <HAL_RCC_OscConfig+0x358>
 80219bc:	4b5a      	ldr	r3, [pc, #360]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 80219be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80219c0:	4a59      	ldr	r2, [pc, #356]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 80219c2:	f023 0301 	bic.w	r3, r3, #1
 80219c6:	6713      	str	r3, [r2, #112]	; 0x70
 80219c8:	4b57      	ldr	r3, [pc, #348]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 80219ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80219cc:	4a56      	ldr	r2, [pc, #344]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 80219ce:	f023 0304 	bic.w	r3, r3, #4
 80219d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80219d4:	687b      	ldr	r3, [r7, #4]
 80219d6:	689b      	ldr	r3, [r3, #8]
 80219d8:	2b00      	cmp	r3, #0
 80219da:	d015      	beq.n	8021a08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80219dc:	f7ff f854 	bl	8020a88 <HAL_GetTick>
 80219e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80219e2:	e00a      	b.n	80219fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80219e4:	f7ff f850 	bl	8020a88 <HAL_GetTick>
 80219e8:	4602      	mov	r2, r0
 80219ea:	693b      	ldr	r3, [r7, #16]
 80219ec:	1ad3      	subs	r3, r2, r3
 80219ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80219f2:	4293      	cmp	r3, r2
 80219f4:	d901      	bls.n	80219fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80219f6:	2303      	movs	r3, #3
 80219f8:	e0d7      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80219fa:	4b4b      	ldr	r3, [pc, #300]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 80219fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80219fe:	f003 0302 	and.w	r3, r3, #2
 8021a02:	2b00      	cmp	r3, #0
 8021a04:	d0ee      	beq.n	80219e4 <HAL_RCC_OscConfig+0x368>
 8021a06:	e014      	b.n	8021a32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021a08:	f7ff f83e 	bl	8020a88 <HAL_GetTick>
 8021a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021a0e:	e00a      	b.n	8021a26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021a10:	f7ff f83a 	bl	8020a88 <HAL_GetTick>
 8021a14:	4602      	mov	r2, r0
 8021a16:	693b      	ldr	r3, [r7, #16]
 8021a18:	1ad3      	subs	r3, r2, r3
 8021a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8021a1e:	4293      	cmp	r3, r2
 8021a20:	d901      	bls.n	8021a26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8021a22:	2303      	movs	r3, #3
 8021a24:	e0c1      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021a26:	4b40      	ldr	r3, [pc, #256]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 8021a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021a2a:	f003 0302 	and.w	r3, r3, #2
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d1ee      	bne.n	8021a10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8021a32:	7dfb      	ldrb	r3, [r7, #23]
 8021a34:	2b01      	cmp	r3, #1
 8021a36:	d105      	bne.n	8021a44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021a38:	4b3b      	ldr	r3, [pc, #236]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 8021a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021a3c:	4a3a      	ldr	r2, [pc, #232]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 8021a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021a42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	699b      	ldr	r3, [r3, #24]
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	f000 80ad 	beq.w	8021ba8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8021a4e:	4b36      	ldr	r3, [pc, #216]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 8021a50:	689b      	ldr	r3, [r3, #8]
 8021a52:	f003 030c 	and.w	r3, r3, #12
 8021a56:	2b08      	cmp	r3, #8
 8021a58:	d060      	beq.n	8021b1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021a5a:	687b      	ldr	r3, [r7, #4]
 8021a5c:	699b      	ldr	r3, [r3, #24]
 8021a5e:	2b02      	cmp	r3, #2
 8021a60:	d145      	bne.n	8021aee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021a62:	4b33      	ldr	r3, [pc, #204]	; (8021b30 <HAL_RCC_OscConfig+0x4b4>)
 8021a64:	2200      	movs	r2, #0
 8021a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021a68:	f7ff f80e 	bl	8020a88 <HAL_GetTick>
 8021a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021a6e:	e008      	b.n	8021a82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021a70:	f7ff f80a 	bl	8020a88 <HAL_GetTick>
 8021a74:	4602      	mov	r2, r0
 8021a76:	693b      	ldr	r3, [r7, #16]
 8021a78:	1ad3      	subs	r3, r2, r3
 8021a7a:	2b02      	cmp	r3, #2
 8021a7c:	d901      	bls.n	8021a82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8021a7e:	2303      	movs	r3, #3
 8021a80:	e093      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021a82:	4b29      	ldr	r3, [pc, #164]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 8021a84:	681b      	ldr	r3, [r3, #0]
 8021a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021a8a:	2b00      	cmp	r3, #0
 8021a8c:	d1f0      	bne.n	8021a70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	69da      	ldr	r2, [r3, #28]
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	6a1b      	ldr	r3, [r3, #32]
 8021a96:	431a      	orrs	r2, r3
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021a9c:	019b      	lsls	r3, r3, #6
 8021a9e:	431a      	orrs	r2, r3
 8021aa0:	687b      	ldr	r3, [r7, #4]
 8021aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021aa4:	085b      	lsrs	r3, r3, #1
 8021aa6:	3b01      	subs	r3, #1
 8021aa8:	041b      	lsls	r3, r3, #16
 8021aaa:	431a      	orrs	r2, r3
 8021aac:	687b      	ldr	r3, [r7, #4]
 8021aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ab0:	061b      	lsls	r3, r3, #24
 8021ab2:	431a      	orrs	r2, r3
 8021ab4:	687b      	ldr	r3, [r7, #4]
 8021ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ab8:	071b      	lsls	r3, r3, #28
 8021aba:	491b      	ldr	r1, [pc, #108]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 8021abc:	4313      	orrs	r3, r2
 8021abe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8021ac0:	4b1b      	ldr	r3, [pc, #108]	; (8021b30 <HAL_RCC_OscConfig+0x4b4>)
 8021ac2:	2201      	movs	r2, #1
 8021ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021ac6:	f7fe ffdf 	bl	8020a88 <HAL_GetTick>
 8021aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021acc:	e008      	b.n	8021ae0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021ace:	f7fe ffdb 	bl	8020a88 <HAL_GetTick>
 8021ad2:	4602      	mov	r2, r0
 8021ad4:	693b      	ldr	r3, [r7, #16]
 8021ad6:	1ad3      	subs	r3, r2, r3
 8021ad8:	2b02      	cmp	r3, #2
 8021ada:	d901      	bls.n	8021ae0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8021adc:	2303      	movs	r3, #3
 8021ade:	e064      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021ae0:	4b11      	ldr	r3, [pc, #68]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 8021ae2:	681b      	ldr	r3, [r3, #0]
 8021ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021ae8:	2b00      	cmp	r3, #0
 8021aea:	d0f0      	beq.n	8021ace <HAL_RCC_OscConfig+0x452>
 8021aec:	e05c      	b.n	8021ba8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021aee:	4b10      	ldr	r3, [pc, #64]	; (8021b30 <HAL_RCC_OscConfig+0x4b4>)
 8021af0:	2200      	movs	r2, #0
 8021af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021af4:	f7fe ffc8 	bl	8020a88 <HAL_GetTick>
 8021af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021afa:	e008      	b.n	8021b0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021afc:	f7fe ffc4 	bl	8020a88 <HAL_GetTick>
 8021b00:	4602      	mov	r2, r0
 8021b02:	693b      	ldr	r3, [r7, #16]
 8021b04:	1ad3      	subs	r3, r2, r3
 8021b06:	2b02      	cmp	r3, #2
 8021b08:	d901      	bls.n	8021b0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8021b0a:	2303      	movs	r3, #3
 8021b0c:	e04d      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021b0e:	4b06      	ldr	r3, [pc, #24]	; (8021b28 <HAL_RCC_OscConfig+0x4ac>)
 8021b10:	681b      	ldr	r3, [r3, #0]
 8021b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021b16:	2b00      	cmp	r3, #0
 8021b18:	d1f0      	bne.n	8021afc <HAL_RCC_OscConfig+0x480>
 8021b1a:	e045      	b.n	8021ba8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8021b1c:	687b      	ldr	r3, [r7, #4]
 8021b1e:	699b      	ldr	r3, [r3, #24]
 8021b20:	2b01      	cmp	r3, #1
 8021b22:	d107      	bne.n	8021b34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8021b24:	2301      	movs	r3, #1
 8021b26:	e040      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
 8021b28:	40023800 	.word	0x40023800
 8021b2c:	40007000 	.word	0x40007000
 8021b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8021b34:	4b1f      	ldr	r3, [pc, #124]	; (8021bb4 <HAL_RCC_OscConfig+0x538>)
 8021b36:	685b      	ldr	r3, [r3, #4]
 8021b38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	699b      	ldr	r3, [r3, #24]
 8021b3e:	2b01      	cmp	r3, #1
 8021b40:	d030      	beq.n	8021ba4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021b42:	68fb      	ldr	r3, [r7, #12]
 8021b44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8021b48:	687b      	ldr	r3, [r7, #4]
 8021b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021b4c:	429a      	cmp	r2, r3
 8021b4e:	d129      	bne.n	8021ba4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8021b50:	68fb      	ldr	r3, [r7, #12]
 8021b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021b5a:	429a      	cmp	r2, r3
 8021b5c:	d122      	bne.n	8021ba4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8021b5e:	68fa      	ldr	r2, [r7, #12]
 8021b60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8021b64:	4013      	ands	r3, r2
 8021b66:	687a      	ldr	r2, [r7, #4]
 8021b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8021b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8021b6c:	4293      	cmp	r3, r2
 8021b6e:	d119      	bne.n	8021ba4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8021b70:	68fb      	ldr	r3, [r7, #12]
 8021b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8021b76:	687b      	ldr	r3, [r7, #4]
 8021b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b7a:	085b      	lsrs	r3, r3, #1
 8021b7c:	3b01      	subs	r3, #1
 8021b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8021b80:	429a      	cmp	r2, r3
 8021b82:	d10f      	bne.n	8021ba4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021b84:	68fb      	ldr	r3, [r7, #12]
 8021b86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8021b8a:	687b      	ldr	r3, [r7, #4]
 8021b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8021b90:	429a      	cmp	r2, r3
 8021b92:	d107      	bne.n	8021ba4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8021b94:	68fb      	ldr	r3, [r7, #12]
 8021b96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8021b9a:	687b      	ldr	r3, [r7, #4]
 8021b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021ba0:	429a      	cmp	r2, r3
 8021ba2:	d001      	beq.n	8021ba8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8021ba4:	2301      	movs	r3, #1
 8021ba6:	e000      	b.n	8021baa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8021ba8:	2300      	movs	r3, #0
}
 8021baa:	4618      	mov	r0, r3
 8021bac:	3718      	adds	r7, #24
 8021bae:	46bd      	mov	sp, r7
 8021bb0:	bd80      	pop	{r7, pc}
 8021bb2:	bf00      	nop
 8021bb4:	40023800 	.word	0x40023800

08021bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021bb8:	b580      	push	{r7, lr}
 8021bba:	b082      	sub	sp, #8
 8021bbc:	af00      	add	r7, sp, #0
 8021bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021bc0:	687b      	ldr	r3, [r7, #4]
 8021bc2:	2b00      	cmp	r3, #0
 8021bc4:	d101      	bne.n	8021bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021bc6:	2301      	movs	r3, #1
 8021bc8:	e03f      	b.n	8021c4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8021bca:	687b      	ldr	r3, [r7, #4]
 8021bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021bd0:	b2db      	uxtb	r3, r3
 8021bd2:	2b00      	cmp	r3, #0
 8021bd4:	d106      	bne.n	8021be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	2200      	movs	r2, #0
 8021bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8021bde:	6878      	ldr	r0, [r7, #4]
 8021be0:	f7fe fe7a 	bl	80208d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	2224      	movs	r2, #36	; 0x24
 8021be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8021bec:	687b      	ldr	r3, [r7, #4]
 8021bee:	681b      	ldr	r3, [r3, #0]
 8021bf0:	68da      	ldr	r2, [r3, #12]
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	681b      	ldr	r3, [r3, #0]
 8021bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8021bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8021bfc:	6878      	ldr	r0, [r7, #4]
 8021bfe:	f000 f829 	bl	8021c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8021c02:	687b      	ldr	r3, [r7, #4]
 8021c04:	681b      	ldr	r3, [r3, #0]
 8021c06:	691a      	ldr	r2, [r3, #16]
 8021c08:	687b      	ldr	r3, [r7, #4]
 8021c0a:	681b      	ldr	r3, [r3, #0]
 8021c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8021c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8021c12:	687b      	ldr	r3, [r7, #4]
 8021c14:	681b      	ldr	r3, [r3, #0]
 8021c16:	695a      	ldr	r2, [r3, #20]
 8021c18:	687b      	ldr	r3, [r7, #4]
 8021c1a:	681b      	ldr	r3, [r3, #0]
 8021c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8021c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	681b      	ldr	r3, [r3, #0]
 8021c26:	68da      	ldr	r2, [r3, #12]
 8021c28:	687b      	ldr	r3, [r7, #4]
 8021c2a:	681b      	ldr	r3, [r3, #0]
 8021c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8021c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	2200      	movs	r2, #0
 8021c36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8021c38:	687b      	ldr	r3, [r7, #4]
 8021c3a:	2220      	movs	r2, #32
 8021c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	2220      	movs	r2, #32
 8021c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8021c48:	2300      	movs	r3, #0
}
 8021c4a:	4618      	mov	r0, r3
 8021c4c:	3708      	adds	r7, #8
 8021c4e:	46bd      	mov	sp, r7
 8021c50:	bd80      	pop	{r7, pc}
	...

08021c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8021c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c58:	b09f      	sub	sp, #124	; 0x7c
 8021c5a:	af00      	add	r7, sp, #0
 8021c5c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021c60:	681b      	ldr	r3, [r3, #0]
 8021c62:	691b      	ldr	r3, [r3, #16]
 8021c64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8021c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021c6a:	68d9      	ldr	r1, [r3, #12]
 8021c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021c6e:	681a      	ldr	r2, [r3, #0]
 8021c70:	ea40 0301 	orr.w	r3, r0, r1
 8021c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8021c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021c78:	689a      	ldr	r2, [r3, #8]
 8021c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021c7c:	691b      	ldr	r3, [r3, #16]
 8021c7e:	431a      	orrs	r2, r3
 8021c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021c82:	695b      	ldr	r3, [r3, #20]
 8021c84:	431a      	orrs	r2, r3
 8021c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021c88:	69db      	ldr	r3, [r3, #28]
 8021c8a:	4313      	orrs	r3, r2
 8021c8c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8021c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021c90:	681b      	ldr	r3, [r3, #0]
 8021c92:	68db      	ldr	r3, [r3, #12]
 8021c94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8021c98:	f021 010c 	bic.w	r1, r1, #12
 8021c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021c9e:	681a      	ldr	r2, [r3, #0]
 8021ca0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021ca2:	430b      	orrs	r3, r1
 8021ca4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8021ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021ca8:	681b      	ldr	r3, [r3, #0]
 8021caa:	695b      	ldr	r3, [r3, #20]
 8021cac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8021cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021cb2:	6999      	ldr	r1, [r3, #24]
 8021cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021cb6:	681a      	ldr	r2, [r3, #0]
 8021cb8:	ea40 0301 	orr.w	r3, r0, r1
 8021cbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8021cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021cc0:	681a      	ldr	r2, [r3, #0]
 8021cc2:	4bc5      	ldr	r3, [pc, #788]	; (8021fd8 <UART_SetConfig+0x384>)
 8021cc4:	429a      	cmp	r2, r3
 8021cc6:	d004      	beq.n	8021cd2 <UART_SetConfig+0x7e>
 8021cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021cca:	681a      	ldr	r2, [r3, #0]
 8021ccc:	4bc3      	ldr	r3, [pc, #780]	; (8021fdc <UART_SetConfig+0x388>)
 8021cce:	429a      	cmp	r2, r3
 8021cd0:	d103      	bne.n	8021cda <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8021cd2:	f7ff fb0d 	bl	80212f0 <HAL_RCC_GetPCLK2Freq>
 8021cd6:	6778      	str	r0, [r7, #116]	; 0x74
 8021cd8:	e002      	b.n	8021ce0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8021cda:	f7ff faf5 	bl	80212c8 <HAL_RCC_GetPCLK1Freq>
 8021cde:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021ce2:	69db      	ldr	r3, [r3, #28]
 8021ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021ce8:	f040 80b6 	bne.w	8021e58 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8021cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021cee:	461c      	mov	r4, r3
 8021cf0:	f04f 0500 	mov.w	r5, #0
 8021cf4:	4622      	mov	r2, r4
 8021cf6:	462b      	mov	r3, r5
 8021cf8:	1891      	adds	r1, r2, r2
 8021cfa:	6439      	str	r1, [r7, #64]	; 0x40
 8021cfc:	415b      	adcs	r3, r3
 8021cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8021d00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8021d04:	1912      	adds	r2, r2, r4
 8021d06:	eb45 0303 	adc.w	r3, r5, r3
 8021d0a:	f04f 0000 	mov.w	r0, #0
 8021d0e:	f04f 0100 	mov.w	r1, #0
 8021d12:	00d9      	lsls	r1, r3, #3
 8021d14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8021d18:	00d0      	lsls	r0, r2, #3
 8021d1a:	4602      	mov	r2, r0
 8021d1c:	460b      	mov	r3, r1
 8021d1e:	1911      	adds	r1, r2, r4
 8021d20:	6639      	str	r1, [r7, #96]	; 0x60
 8021d22:	416b      	adcs	r3, r5
 8021d24:	667b      	str	r3, [r7, #100]	; 0x64
 8021d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021d28:	685b      	ldr	r3, [r3, #4]
 8021d2a:	461a      	mov	r2, r3
 8021d2c:	f04f 0300 	mov.w	r3, #0
 8021d30:	1891      	adds	r1, r2, r2
 8021d32:	63b9      	str	r1, [r7, #56]	; 0x38
 8021d34:	415b      	adcs	r3, r3
 8021d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8021d3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8021d40:	f7fe fabe 	bl	80202c0 <__aeabi_uldivmod>
 8021d44:	4602      	mov	r2, r0
 8021d46:	460b      	mov	r3, r1
 8021d48:	4ba5      	ldr	r3, [pc, #660]	; (8021fe0 <UART_SetConfig+0x38c>)
 8021d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8021d4e:	095b      	lsrs	r3, r3, #5
 8021d50:	011e      	lsls	r6, r3, #4
 8021d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021d54:	461c      	mov	r4, r3
 8021d56:	f04f 0500 	mov.w	r5, #0
 8021d5a:	4622      	mov	r2, r4
 8021d5c:	462b      	mov	r3, r5
 8021d5e:	1891      	adds	r1, r2, r2
 8021d60:	6339      	str	r1, [r7, #48]	; 0x30
 8021d62:	415b      	adcs	r3, r3
 8021d64:	637b      	str	r3, [r7, #52]	; 0x34
 8021d66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8021d6a:	1912      	adds	r2, r2, r4
 8021d6c:	eb45 0303 	adc.w	r3, r5, r3
 8021d70:	f04f 0000 	mov.w	r0, #0
 8021d74:	f04f 0100 	mov.w	r1, #0
 8021d78:	00d9      	lsls	r1, r3, #3
 8021d7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8021d7e:	00d0      	lsls	r0, r2, #3
 8021d80:	4602      	mov	r2, r0
 8021d82:	460b      	mov	r3, r1
 8021d84:	1911      	adds	r1, r2, r4
 8021d86:	65b9      	str	r1, [r7, #88]	; 0x58
 8021d88:	416b      	adcs	r3, r5
 8021d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021d8e:	685b      	ldr	r3, [r3, #4]
 8021d90:	461a      	mov	r2, r3
 8021d92:	f04f 0300 	mov.w	r3, #0
 8021d96:	1891      	adds	r1, r2, r2
 8021d98:	62b9      	str	r1, [r7, #40]	; 0x28
 8021d9a:	415b      	adcs	r3, r3
 8021d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021d9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8021da2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8021da6:	f7fe fa8b 	bl	80202c0 <__aeabi_uldivmod>
 8021daa:	4602      	mov	r2, r0
 8021dac:	460b      	mov	r3, r1
 8021dae:	4b8c      	ldr	r3, [pc, #560]	; (8021fe0 <UART_SetConfig+0x38c>)
 8021db0:	fba3 1302 	umull	r1, r3, r3, r2
 8021db4:	095b      	lsrs	r3, r3, #5
 8021db6:	2164      	movs	r1, #100	; 0x64
 8021db8:	fb01 f303 	mul.w	r3, r1, r3
 8021dbc:	1ad3      	subs	r3, r2, r3
 8021dbe:	00db      	lsls	r3, r3, #3
 8021dc0:	3332      	adds	r3, #50	; 0x32
 8021dc2:	4a87      	ldr	r2, [pc, #540]	; (8021fe0 <UART_SetConfig+0x38c>)
 8021dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8021dc8:	095b      	lsrs	r3, r3, #5
 8021dca:	005b      	lsls	r3, r3, #1
 8021dcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8021dd0:	441e      	add	r6, r3
 8021dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021dd4:	4618      	mov	r0, r3
 8021dd6:	f04f 0100 	mov.w	r1, #0
 8021dda:	4602      	mov	r2, r0
 8021ddc:	460b      	mov	r3, r1
 8021dde:	1894      	adds	r4, r2, r2
 8021de0:	623c      	str	r4, [r7, #32]
 8021de2:	415b      	adcs	r3, r3
 8021de4:	627b      	str	r3, [r7, #36]	; 0x24
 8021de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8021dea:	1812      	adds	r2, r2, r0
 8021dec:	eb41 0303 	adc.w	r3, r1, r3
 8021df0:	f04f 0400 	mov.w	r4, #0
 8021df4:	f04f 0500 	mov.w	r5, #0
 8021df8:	00dd      	lsls	r5, r3, #3
 8021dfa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8021dfe:	00d4      	lsls	r4, r2, #3
 8021e00:	4622      	mov	r2, r4
 8021e02:	462b      	mov	r3, r5
 8021e04:	1814      	adds	r4, r2, r0
 8021e06:	653c      	str	r4, [r7, #80]	; 0x50
 8021e08:	414b      	adcs	r3, r1
 8021e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8021e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021e0e:	685b      	ldr	r3, [r3, #4]
 8021e10:	461a      	mov	r2, r3
 8021e12:	f04f 0300 	mov.w	r3, #0
 8021e16:	1891      	adds	r1, r2, r2
 8021e18:	61b9      	str	r1, [r7, #24]
 8021e1a:	415b      	adcs	r3, r3
 8021e1c:	61fb      	str	r3, [r7, #28]
 8021e1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021e22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8021e26:	f7fe fa4b 	bl	80202c0 <__aeabi_uldivmod>
 8021e2a:	4602      	mov	r2, r0
 8021e2c:	460b      	mov	r3, r1
 8021e2e:	4b6c      	ldr	r3, [pc, #432]	; (8021fe0 <UART_SetConfig+0x38c>)
 8021e30:	fba3 1302 	umull	r1, r3, r3, r2
 8021e34:	095b      	lsrs	r3, r3, #5
 8021e36:	2164      	movs	r1, #100	; 0x64
 8021e38:	fb01 f303 	mul.w	r3, r1, r3
 8021e3c:	1ad3      	subs	r3, r2, r3
 8021e3e:	00db      	lsls	r3, r3, #3
 8021e40:	3332      	adds	r3, #50	; 0x32
 8021e42:	4a67      	ldr	r2, [pc, #412]	; (8021fe0 <UART_SetConfig+0x38c>)
 8021e44:	fba2 2303 	umull	r2, r3, r2, r3
 8021e48:	095b      	lsrs	r3, r3, #5
 8021e4a:	f003 0207 	and.w	r2, r3, #7
 8021e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021e50:	681b      	ldr	r3, [r3, #0]
 8021e52:	4432      	add	r2, r6
 8021e54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8021e56:	e0b9      	b.n	8021fcc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8021e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021e5a:	461c      	mov	r4, r3
 8021e5c:	f04f 0500 	mov.w	r5, #0
 8021e60:	4622      	mov	r2, r4
 8021e62:	462b      	mov	r3, r5
 8021e64:	1891      	adds	r1, r2, r2
 8021e66:	6139      	str	r1, [r7, #16]
 8021e68:	415b      	adcs	r3, r3
 8021e6a:	617b      	str	r3, [r7, #20]
 8021e6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021e70:	1912      	adds	r2, r2, r4
 8021e72:	eb45 0303 	adc.w	r3, r5, r3
 8021e76:	f04f 0000 	mov.w	r0, #0
 8021e7a:	f04f 0100 	mov.w	r1, #0
 8021e7e:	00d9      	lsls	r1, r3, #3
 8021e80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8021e84:	00d0      	lsls	r0, r2, #3
 8021e86:	4602      	mov	r2, r0
 8021e88:	460b      	mov	r3, r1
 8021e8a:	eb12 0804 	adds.w	r8, r2, r4
 8021e8e:	eb43 0905 	adc.w	r9, r3, r5
 8021e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021e94:	685b      	ldr	r3, [r3, #4]
 8021e96:	4618      	mov	r0, r3
 8021e98:	f04f 0100 	mov.w	r1, #0
 8021e9c:	f04f 0200 	mov.w	r2, #0
 8021ea0:	f04f 0300 	mov.w	r3, #0
 8021ea4:	008b      	lsls	r3, r1, #2
 8021ea6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8021eaa:	0082      	lsls	r2, r0, #2
 8021eac:	4640      	mov	r0, r8
 8021eae:	4649      	mov	r1, r9
 8021eb0:	f7fe fa06 	bl	80202c0 <__aeabi_uldivmod>
 8021eb4:	4602      	mov	r2, r0
 8021eb6:	460b      	mov	r3, r1
 8021eb8:	4b49      	ldr	r3, [pc, #292]	; (8021fe0 <UART_SetConfig+0x38c>)
 8021eba:	fba3 2302 	umull	r2, r3, r3, r2
 8021ebe:	095b      	lsrs	r3, r3, #5
 8021ec0:	011e      	lsls	r6, r3, #4
 8021ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021ec4:	4618      	mov	r0, r3
 8021ec6:	f04f 0100 	mov.w	r1, #0
 8021eca:	4602      	mov	r2, r0
 8021ecc:	460b      	mov	r3, r1
 8021ece:	1894      	adds	r4, r2, r2
 8021ed0:	60bc      	str	r4, [r7, #8]
 8021ed2:	415b      	adcs	r3, r3
 8021ed4:	60fb      	str	r3, [r7, #12]
 8021ed6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021eda:	1812      	adds	r2, r2, r0
 8021edc:	eb41 0303 	adc.w	r3, r1, r3
 8021ee0:	f04f 0400 	mov.w	r4, #0
 8021ee4:	f04f 0500 	mov.w	r5, #0
 8021ee8:	00dd      	lsls	r5, r3, #3
 8021eea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8021eee:	00d4      	lsls	r4, r2, #3
 8021ef0:	4622      	mov	r2, r4
 8021ef2:	462b      	mov	r3, r5
 8021ef4:	1814      	adds	r4, r2, r0
 8021ef6:	64bc      	str	r4, [r7, #72]	; 0x48
 8021ef8:	414b      	adcs	r3, r1
 8021efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021efe:	685b      	ldr	r3, [r3, #4]
 8021f00:	4618      	mov	r0, r3
 8021f02:	f04f 0100 	mov.w	r1, #0
 8021f06:	f04f 0200 	mov.w	r2, #0
 8021f0a:	f04f 0300 	mov.w	r3, #0
 8021f0e:	008b      	lsls	r3, r1, #2
 8021f10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8021f14:	0082      	lsls	r2, r0, #2
 8021f16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8021f1a:	f7fe f9d1 	bl	80202c0 <__aeabi_uldivmod>
 8021f1e:	4602      	mov	r2, r0
 8021f20:	460b      	mov	r3, r1
 8021f22:	4b2f      	ldr	r3, [pc, #188]	; (8021fe0 <UART_SetConfig+0x38c>)
 8021f24:	fba3 1302 	umull	r1, r3, r3, r2
 8021f28:	095b      	lsrs	r3, r3, #5
 8021f2a:	2164      	movs	r1, #100	; 0x64
 8021f2c:	fb01 f303 	mul.w	r3, r1, r3
 8021f30:	1ad3      	subs	r3, r2, r3
 8021f32:	011b      	lsls	r3, r3, #4
 8021f34:	3332      	adds	r3, #50	; 0x32
 8021f36:	4a2a      	ldr	r2, [pc, #168]	; (8021fe0 <UART_SetConfig+0x38c>)
 8021f38:	fba2 2303 	umull	r2, r3, r2, r3
 8021f3c:	095b      	lsrs	r3, r3, #5
 8021f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021f42:	441e      	add	r6, r3
 8021f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021f46:	4618      	mov	r0, r3
 8021f48:	f04f 0100 	mov.w	r1, #0
 8021f4c:	4602      	mov	r2, r0
 8021f4e:	460b      	mov	r3, r1
 8021f50:	1894      	adds	r4, r2, r2
 8021f52:	603c      	str	r4, [r7, #0]
 8021f54:	415b      	adcs	r3, r3
 8021f56:	607b      	str	r3, [r7, #4]
 8021f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021f5c:	1812      	adds	r2, r2, r0
 8021f5e:	eb41 0303 	adc.w	r3, r1, r3
 8021f62:	f04f 0400 	mov.w	r4, #0
 8021f66:	f04f 0500 	mov.w	r5, #0
 8021f6a:	00dd      	lsls	r5, r3, #3
 8021f6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8021f70:	00d4      	lsls	r4, r2, #3
 8021f72:	4622      	mov	r2, r4
 8021f74:	462b      	mov	r3, r5
 8021f76:	eb12 0a00 	adds.w	sl, r2, r0
 8021f7a:	eb43 0b01 	adc.w	fp, r3, r1
 8021f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021f80:	685b      	ldr	r3, [r3, #4]
 8021f82:	4618      	mov	r0, r3
 8021f84:	f04f 0100 	mov.w	r1, #0
 8021f88:	f04f 0200 	mov.w	r2, #0
 8021f8c:	f04f 0300 	mov.w	r3, #0
 8021f90:	008b      	lsls	r3, r1, #2
 8021f92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8021f96:	0082      	lsls	r2, r0, #2
 8021f98:	4650      	mov	r0, sl
 8021f9a:	4659      	mov	r1, fp
 8021f9c:	f7fe f990 	bl	80202c0 <__aeabi_uldivmod>
 8021fa0:	4602      	mov	r2, r0
 8021fa2:	460b      	mov	r3, r1
 8021fa4:	4b0e      	ldr	r3, [pc, #56]	; (8021fe0 <UART_SetConfig+0x38c>)
 8021fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8021faa:	095b      	lsrs	r3, r3, #5
 8021fac:	2164      	movs	r1, #100	; 0x64
 8021fae:	fb01 f303 	mul.w	r3, r1, r3
 8021fb2:	1ad3      	subs	r3, r2, r3
 8021fb4:	011b      	lsls	r3, r3, #4
 8021fb6:	3332      	adds	r3, #50	; 0x32
 8021fb8:	4a09      	ldr	r2, [pc, #36]	; (8021fe0 <UART_SetConfig+0x38c>)
 8021fba:	fba2 2303 	umull	r2, r3, r2, r3
 8021fbe:	095b      	lsrs	r3, r3, #5
 8021fc0:	f003 020f 	and.w	r2, r3, #15
 8021fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021fc6:	681b      	ldr	r3, [r3, #0]
 8021fc8:	4432      	add	r2, r6
 8021fca:	609a      	str	r2, [r3, #8]
}
 8021fcc:	bf00      	nop
 8021fce:	377c      	adds	r7, #124	; 0x7c
 8021fd0:	46bd      	mov	sp, r7
 8021fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fd6:	bf00      	nop
 8021fd8:	40011000 	.word	0x40011000
 8021fdc:	40011400 	.word	0x40011400
 8021fe0:	51eb851f 	.word	0x51eb851f

08021fe4 <user_app>:
#include "main.h"
#include "gpio.h"
//prototype
static void print(char *msg, ...);
void user_app(void)
{
 8021fe4:	b580      	push	{r7, lr}
 8021fe6:	af00      	add	r7, sp, #0
	while(1)
	{
		print("Youtube Tutorial:  %d\r\n", HAL_GetTick());
 8021fe8:	f7fe fd4e 	bl	8020a88 <HAL_GetTick>
 8021fec:	4603      	mov	r3, r0
 8021fee:	4619      	mov	r1, r3
 8021ff0:	4805      	ldr	r0, [pc, #20]	; (8022008 <user_app+0x24>)
 8021ff2:	f000 f80d 	bl	8022010 <print>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8021ff6:	2120      	movs	r1, #32
 8021ff8:	4804      	ldr	r0, [pc, #16]	; (802200c <user_app+0x28>)
 8021ffa:	f7ff f808 	bl	802100e <HAL_GPIO_TogglePin>
		HAL_Delay(75);
 8021ffe:	204b      	movs	r0, #75	; 0x4b
 8022000:	f7fe fd4e 	bl	8020aa0 <HAL_Delay>
		print("Youtube Tutorial:  %d\r\n", HAL_GetTick());
 8022004:	e7f0      	b.n	8021fe8 <user_app+0x4>
 8022006:	bf00      	nop
 8022008:	08022970 	.word	0x08022970
 802200c:	40020000 	.word	0x40020000

08022010 <print>:

	}
}

static void print(char *msg, ...)
{
 8022010:	b40f      	push	{r0, r1, r2, r3}
 8022012:	b580      	push	{r7, lr}
 8022014:	b0c2      	sub	sp, #264	; 0x108
 8022016:	af00      	add	r7, sp, #0
	char buff[250];
	va_list args;
	va_start(args, msg);
 8022018:	f507 728a 	add.w	r2, r7, #276	; 0x114
 802201c:	1d3b      	adds	r3, r7, #4
 802201e:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 8022020:	1d3b      	adds	r3, r7, #4
 8022022:	f107 0008 	add.w	r0, r7, #8
 8022026:	681a      	ldr	r2, [r3, #0]
 8022028:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 802202c:	f000 f87c 	bl	8022128 <vsiprintf>

	for (int i = 0; i < strlen(buff); i++)
 8022030:	2300      	movs	r3, #0
 8022032:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8022036:	e013      	b.n	8022060 <print+0x50>
	{
		USART2->DR = buff[i];
 8022038:	f107 0208 	add.w	r2, r7, #8
 802203c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8022040:	4413      	add	r3, r2
 8022042:	781a      	ldrb	r2, [r3, #0]
 8022044:	4b13      	ldr	r3, [pc, #76]	; (8022094 <print+0x84>)
 8022046:	605a      	str	r2, [r3, #4]
		while (!(USART2->SR & USART_SR_TXE))
 8022048:	bf00      	nop
 802204a:	4b12      	ldr	r3, [pc, #72]	; (8022094 <print+0x84>)
 802204c:	681b      	ldr	r3, [r3, #0]
 802204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022052:	2b00      	cmp	r3, #0
 8022054:	d0f9      	beq.n	802204a <print+0x3a>
	for (int i = 0; i < strlen(buff); i++)
 8022056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 802205a:	3301      	adds	r3, #1
 802205c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8022060:	f107 0308 	add.w	r3, r7, #8
 8022064:	4618      	mov	r0, r3
 8022066:	f7fe f8d3 	bl	8020210 <strlen>
 802206a:	4602      	mov	r2, r0
 802206c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8022070:	429a      	cmp	r2, r3
 8022072:	d8e1      	bhi.n	8022038 <print+0x28>
			;
	}

	while (!(USART2->SR & USART_SR_TC))
 8022074:	bf00      	nop
 8022076:	4b07      	ldr	r3, [pc, #28]	; (8022094 <print+0x84>)
 8022078:	681b      	ldr	r3, [r3, #0]
 802207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802207e:	2b00      	cmp	r3, #0
 8022080:	d0f9      	beq.n	8022076 <print+0x66>
		;
}
 8022082:	bf00      	nop
 8022084:	bf00      	nop
 8022086:	f507 7784 	add.w	r7, r7, #264	; 0x108
 802208a:	46bd      	mov	sp, r7
 802208c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022090:	b004      	add	sp, #16
 8022092:	4770      	bx	lr
 8022094:	40004400 	.word	0x40004400

08022098 <__errno>:
 8022098:	4b01      	ldr	r3, [pc, #4]	; (80220a0 <__errno+0x8>)
 802209a:	6818      	ldr	r0, [r3, #0]
 802209c:	4770      	bx	lr
 802209e:	bf00      	nop
 80220a0:	2000000c 	.word	0x2000000c

080220a4 <__libc_init_array>:
 80220a4:	b570      	push	{r4, r5, r6, lr}
 80220a6:	4d0d      	ldr	r5, [pc, #52]	; (80220dc <__libc_init_array+0x38>)
 80220a8:	4c0d      	ldr	r4, [pc, #52]	; (80220e0 <__libc_init_array+0x3c>)
 80220aa:	1b64      	subs	r4, r4, r5
 80220ac:	10a4      	asrs	r4, r4, #2
 80220ae:	2600      	movs	r6, #0
 80220b0:	42a6      	cmp	r6, r4
 80220b2:	d109      	bne.n	80220c8 <__libc_init_array+0x24>
 80220b4:	4d0b      	ldr	r5, [pc, #44]	; (80220e4 <__libc_init_array+0x40>)
 80220b6:	4c0c      	ldr	r4, [pc, #48]	; (80220e8 <__libc_init_array+0x44>)
 80220b8:	f000 fc4e 	bl	8022958 <_init>
 80220bc:	1b64      	subs	r4, r4, r5
 80220be:	10a4      	asrs	r4, r4, #2
 80220c0:	2600      	movs	r6, #0
 80220c2:	42a6      	cmp	r6, r4
 80220c4:	d105      	bne.n	80220d2 <__libc_init_array+0x2e>
 80220c6:	bd70      	pop	{r4, r5, r6, pc}
 80220c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80220cc:	4798      	blx	r3
 80220ce:	3601      	adds	r6, #1
 80220d0:	e7ee      	b.n	80220b0 <__libc_init_array+0xc>
 80220d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80220d6:	4798      	blx	r3
 80220d8:	3601      	adds	r6, #1
 80220da:	e7f2      	b.n	80220c2 <__libc_init_array+0x1e>
 80220dc:	080229dc 	.word	0x080229dc
 80220e0:	080229dc 	.word	0x080229dc
 80220e4:	080229dc 	.word	0x080229dc
 80220e8:	080229e0 	.word	0x080229e0

080220ec <memset>:
 80220ec:	4402      	add	r2, r0
 80220ee:	4603      	mov	r3, r0
 80220f0:	4293      	cmp	r3, r2
 80220f2:	d100      	bne.n	80220f6 <memset+0xa>
 80220f4:	4770      	bx	lr
 80220f6:	f803 1b01 	strb.w	r1, [r3], #1
 80220fa:	e7f9      	b.n	80220f0 <memset+0x4>

080220fc <_vsiprintf_r>:
 80220fc:	b500      	push	{lr}
 80220fe:	b09b      	sub	sp, #108	; 0x6c
 8022100:	9100      	str	r1, [sp, #0]
 8022102:	9104      	str	r1, [sp, #16]
 8022104:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022108:	9105      	str	r1, [sp, #20]
 802210a:	9102      	str	r1, [sp, #8]
 802210c:	4905      	ldr	r1, [pc, #20]	; (8022124 <_vsiprintf_r+0x28>)
 802210e:	9103      	str	r1, [sp, #12]
 8022110:	4669      	mov	r1, sp
 8022112:	f000 f86f 	bl	80221f4 <_svfiprintf_r>
 8022116:	9b00      	ldr	r3, [sp, #0]
 8022118:	2200      	movs	r2, #0
 802211a:	701a      	strb	r2, [r3, #0]
 802211c:	b01b      	add	sp, #108	; 0x6c
 802211e:	f85d fb04 	ldr.w	pc, [sp], #4
 8022122:	bf00      	nop
 8022124:	ffff0208 	.word	0xffff0208

08022128 <vsiprintf>:
 8022128:	4613      	mov	r3, r2
 802212a:	460a      	mov	r2, r1
 802212c:	4601      	mov	r1, r0
 802212e:	4802      	ldr	r0, [pc, #8]	; (8022138 <vsiprintf+0x10>)
 8022130:	6800      	ldr	r0, [r0, #0]
 8022132:	f7ff bfe3 	b.w	80220fc <_vsiprintf_r>
 8022136:	bf00      	nop
 8022138:	2000000c 	.word	0x2000000c

0802213c <__ssputs_r>:
 802213c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022140:	688e      	ldr	r6, [r1, #8]
 8022142:	429e      	cmp	r6, r3
 8022144:	4682      	mov	sl, r0
 8022146:	460c      	mov	r4, r1
 8022148:	4690      	mov	r8, r2
 802214a:	461f      	mov	r7, r3
 802214c:	d838      	bhi.n	80221c0 <__ssputs_r+0x84>
 802214e:	898a      	ldrh	r2, [r1, #12]
 8022150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022154:	d032      	beq.n	80221bc <__ssputs_r+0x80>
 8022156:	6825      	ldr	r5, [r4, #0]
 8022158:	6909      	ldr	r1, [r1, #16]
 802215a:	eba5 0901 	sub.w	r9, r5, r1
 802215e:	6965      	ldr	r5, [r4, #20]
 8022160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022168:	3301      	adds	r3, #1
 802216a:	444b      	add	r3, r9
 802216c:	106d      	asrs	r5, r5, #1
 802216e:	429d      	cmp	r5, r3
 8022170:	bf38      	it	cc
 8022172:	461d      	movcc	r5, r3
 8022174:	0553      	lsls	r3, r2, #21
 8022176:	d531      	bpl.n	80221dc <__ssputs_r+0xa0>
 8022178:	4629      	mov	r1, r5
 802217a:	f000 fb47 	bl	802280c <_malloc_r>
 802217e:	4606      	mov	r6, r0
 8022180:	b950      	cbnz	r0, 8022198 <__ssputs_r+0x5c>
 8022182:	230c      	movs	r3, #12
 8022184:	f8ca 3000 	str.w	r3, [sl]
 8022188:	89a3      	ldrh	r3, [r4, #12]
 802218a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802218e:	81a3      	strh	r3, [r4, #12]
 8022190:	f04f 30ff 	mov.w	r0, #4294967295
 8022194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022198:	6921      	ldr	r1, [r4, #16]
 802219a:	464a      	mov	r2, r9
 802219c:	f000 fabe 	bl	802271c <memcpy>
 80221a0:	89a3      	ldrh	r3, [r4, #12]
 80221a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80221a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80221aa:	81a3      	strh	r3, [r4, #12]
 80221ac:	6126      	str	r6, [r4, #16]
 80221ae:	6165      	str	r5, [r4, #20]
 80221b0:	444e      	add	r6, r9
 80221b2:	eba5 0509 	sub.w	r5, r5, r9
 80221b6:	6026      	str	r6, [r4, #0]
 80221b8:	60a5      	str	r5, [r4, #8]
 80221ba:	463e      	mov	r6, r7
 80221bc:	42be      	cmp	r6, r7
 80221be:	d900      	bls.n	80221c2 <__ssputs_r+0x86>
 80221c0:	463e      	mov	r6, r7
 80221c2:	4632      	mov	r2, r6
 80221c4:	6820      	ldr	r0, [r4, #0]
 80221c6:	4641      	mov	r1, r8
 80221c8:	f000 fab6 	bl	8022738 <memmove>
 80221cc:	68a3      	ldr	r3, [r4, #8]
 80221ce:	6822      	ldr	r2, [r4, #0]
 80221d0:	1b9b      	subs	r3, r3, r6
 80221d2:	4432      	add	r2, r6
 80221d4:	60a3      	str	r3, [r4, #8]
 80221d6:	6022      	str	r2, [r4, #0]
 80221d8:	2000      	movs	r0, #0
 80221da:	e7db      	b.n	8022194 <__ssputs_r+0x58>
 80221dc:	462a      	mov	r2, r5
 80221de:	f000 fb6f 	bl	80228c0 <_realloc_r>
 80221e2:	4606      	mov	r6, r0
 80221e4:	2800      	cmp	r0, #0
 80221e6:	d1e1      	bne.n	80221ac <__ssputs_r+0x70>
 80221e8:	6921      	ldr	r1, [r4, #16]
 80221ea:	4650      	mov	r0, sl
 80221ec:	f000 fabe 	bl	802276c <_free_r>
 80221f0:	e7c7      	b.n	8022182 <__ssputs_r+0x46>
	...

080221f4 <_svfiprintf_r>:
 80221f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221f8:	4698      	mov	r8, r3
 80221fa:	898b      	ldrh	r3, [r1, #12]
 80221fc:	061b      	lsls	r3, r3, #24
 80221fe:	b09d      	sub	sp, #116	; 0x74
 8022200:	4607      	mov	r7, r0
 8022202:	460d      	mov	r5, r1
 8022204:	4614      	mov	r4, r2
 8022206:	d50e      	bpl.n	8022226 <_svfiprintf_r+0x32>
 8022208:	690b      	ldr	r3, [r1, #16]
 802220a:	b963      	cbnz	r3, 8022226 <_svfiprintf_r+0x32>
 802220c:	2140      	movs	r1, #64	; 0x40
 802220e:	f000 fafd 	bl	802280c <_malloc_r>
 8022212:	6028      	str	r0, [r5, #0]
 8022214:	6128      	str	r0, [r5, #16]
 8022216:	b920      	cbnz	r0, 8022222 <_svfiprintf_r+0x2e>
 8022218:	230c      	movs	r3, #12
 802221a:	603b      	str	r3, [r7, #0]
 802221c:	f04f 30ff 	mov.w	r0, #4294967295
 8022220:	e0d1      	b.n	80223c6 <_svfiprintf_r+0x1d2>
 8022222:	2340      	movs	r3, #64	; 0x40
 8022224:	616b      	str	r3, [r5, #20]
 8022226:	2300      	movs	r3, #0
 8022228:	9309      	str	r3, [sp, #36]	; 0x24
 802222a:	2320      	movs	r3, #32
 802222c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022230:	f8cd 800c 	str.w	r8, [sp, #12]
 8022234:	2330      	movs	r3, #48	; 0x30
 8022236:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80223e0 <_svfiprintf_r+0x1ec>
 802223a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802223e:	f04f 0901 	mov.w	r9, #1
 8022242:	4623      	mov	r3, r4
 8022244:	469a      	mov	sl, r3
 8022246:	f813 2b01 	ldrb.w	r2, [r3], #1
 802224a:	b10a      	cbz	r2, 8022250 <_svfiprintf_r+0x5c>
 802224c:	2a25      	cmp	r2, #37	; 0x25
 802224e:	d1f9      	bne.n	8022244 <_svfiprintf_r+0x50>
 8022250:	ebba 0b04 	subs.w	fp, sl, r4
 8022254:	d00b      	beq.n	802226e <_svfiprintf_r+0x7a>
 8022256:	465b      	mov	r3, fp
 8022258:	4622      	mov	r2, r4
 802225a:	4629      	mov	r1, r5
 802225c:	4638      	mov	r0, r7
 802225e:	f7ff ff6d 	bl	802213c <__ssputs_r>
 8022262:	3001      	adds	r0, #1
 8022264:	f000 80aa 	beq.w	80223bc <_svfiprintf_r+0x1c8>
 8022268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802226a:	445a      	add	r2, fp
 802226c:	9209      	str	r2, [sp, #36]	; 0x24
 802226e:	f89a 3000 	ldrb.w	r3, [sl]
 8022272:	2b00      	cmp	r3, #0
 8022274:	f000 80a2 	beq.w	80223bc <_svfiprintf_r+0x1c8>
 8022278:	2300      	movs	r3, #0
 802227a:	f04f 32ff 	mov.w	r2, #4294967295
 802227e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022282:	f10a 0a01 	add.w	sl, sl, #1
 8022286:	9304      	str	r3, [sp, #16]
 8022288:	9307      	str	r3, [sp, #28]
 802228a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802228e:	931a      	str	r3, [sp, #104]	; 0x68
 8022290:	4654      	mov	r4, sl
 8022292:	2205      	movs	r2, #5
 8022294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022298:	4851      	ldr	r0, [pc, #324]	; (80223e0 <_svfiprintf_r+0x1ec>)
 802229a:	f7fd ffc1 	bl	8020220 <memchr>
 802229e:	9a04      	ldr	r2, [sp, #16]
 80222a0:	b9d8      	cbnz	r0, 80222da <_svfiprintf_r+0xe6>
 80222a2:	06d0      	lsls	r0, r2, #27
 80222a4:	bf44      	itt	mi
 80222a6:	2320      	movmi	r3, #32
 80222a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80222ac:	0711      	lsls	r1, r2, #28
 80222ae:	bf44      	itt	mi
 80222b0:	232b      	movmi	r3, #43	; 0x2b
 80222b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80222b6:	f89a 3000 	ldrb.w	r3, [sl]
 80222ba:	2b2a      	cmp	r3, #42	; 0x2a
 80222bc:	d015      	beq.n	80222ea <_svfiprintf_r+0xf6>
 80222be:	9a07      	ldr	r2, [sp, #28]
 80222c0:	4654      	mov	r4, sl
 80222c2:	2000      	movs	r0, #0
 80222c4:	f04f 0c0a 	mov.w	ip, #10
 80222c8:	4621      	mov	r1, r4
 80222ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80222ce:	3b30      	subs	r3, #48	; 0x30
 80222d0:	2b09      	cmp	r3, #9
 80222d2:	d94e      	bls.n	8022372 <_svfiprintf_r+0x17e>
 80222d4:	b1b0      	cbz	r0, 8022304 <_svfiprintf_r+0x110>
 80222d6:	9207      	str	r2, [sp, #28]
 80222d8:	e014      	b.n	8022304 <_svfiprintf_r+0x110>
 80222da:	eba0 0308 	sub.w	r3, r0, r8
 80222de:	fa09 f303 	lsl.w	r3, r9, r3
 80222e2:	4313      	orrs	r3, r2
 80222e4:	9304      	str	r3, [sp, #16]
 80222e6:	46a2      	mov	sl, r4
 80222e8:	e7d2      	b.n	8022290 <_svfiprintf_r+0x9c>
 80222ea:	9b03      	ldr	r3, [sp, #12]
 80222ec:	1d19      	adds	r1, r3, #4
 80222ee:	681b      	ldr	r3, [r3, #0]
 80222f0:	9103      	str	r1, [sp, #12]
 80222f2:	2b00      	cmp	r3, #0
 80222f4:	bfbb      	ittet	lt
 80222f6:	425b      	neglt	r3, r3
 80222f8:	f042 0202 	orrlt.w	r2, r2, #2
 80222fc:	9307      	strge	r3, [sp, #28]
 80222fe:	9307      	strlt	r3, [sp, #28]
 8022300:	bfb8      	it	lt
 8022302:	9204      	strlt	r2, [sp, #16]
 8022304:	7823      	ldrb	r3, [r4, #0]
 8022306:	2b2e      	cmp	r3, #46	; 0x2e
 8022308:	d10c      	bne.n	8022324 <_svfiprintf_r+0x130>
 802230a:	7863      	ldrb	r3, [r4, #1]
 802230c:	2b2a      	cmp	r3, #42	; 0x2a
 802230e:	d135      	bne.n	802237c <_svfiprintf_r+0x188>
 8022310:	9b03      	ldr	r3, [sp, #12]
 8022312:	1d1a      	adds	r2, r3, #4
 8022314:	681b      	ldr	r3, [r3, #0]
 8022316:	9203      	str	r2, [sp, #12]
 8022318:	2b00      	cmp	r3, #0
 802231a:	bfb8      	it	lt
 802231c:	f04f 33ff 	movlt.w	r3, #4294967295
 8022320:	3402      	adds	r4, #2
 8022322:	9305      	str	r3, [sp, #20]
 8022324:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80223f0 <_svfiprintf_r+0x1fc>
 8022328:	7821      	ldrb	r1, [r4, #0]
 802232a:	2203      	movs	r2, #3
 802232c:	4650      	mov	r0, sl
 802232e:	f7fd ff77 	bl	8020220 <memchr>
 8022332:	b140      	cbz	r0, 8022346 <_svfiprintf_r+0x152>
 8022334:	2340      	movs	r3, #64	; 0x40
 8022336:	eba0 000a 	sub.w	r0, r0, sl
 802233a:	fa03 f000 	lsl.w	r0, r3, r0
 802233e:	9b04      	ldr	r3, [sp, #16]
 8022340:	4303      	orrs	r3, r0
 8022342:	3401      	adds	r4, #1
 8022344:	9304      	str	r3, [sp, #16]
 8022346:	f814 1b01 	ldrb.w	r1, [r4], #1
 802234a:	4826      	ldr	r0, [pc, #152]	; (80223e4 <_svfiprintf_r+0x1f0>)
 802234c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022350:	2206      	movs	r2, #6
 8022352:	f7fd ff65 	bl	8020220 <memchr>
 8022356:	2800      	cmp	r0, #0
 8022358:	d038      	beq.n	80223cc <_svfiprintf_r+0x1d8>
 802235a:	4b23      	ldr	r3, [pc, #140]	; (80223e8 <_svfiprintf_r+0x1f4>)
 802235c:	bb1b      	cbnz	r3, 80223a6 <_svfiprintf_r+0x1b2>
 802235e:	9b03      	ldr	r3, [sp, #12]
 8022360:	3307      	adds	r3, #7
 8022362:	f023 0307 	bic.w	r3, r3, #7
 8022366:	3308      	adds	r3, #8
 8022368:	9303      	str	r3, [sp, #12]
 802236a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802236c:	4433      	add	r3, r6
 802236e:	9309      	str	r3, [sp, #36]	; 0x24
 8022370:	e767      	b.n	8022242 <_svfiprintf_r+0x4e>
 8022372:	fb0c 3202 	mla	r2, ip, r2, r3
 8022376:	460c      	mov	r4, r1
 8022378:	2001      	movs	r0, #1
 802237a:	e7a5      	b.n	80222c8 <_svfiprintf_r+0xd4>
 802237c:	2300      	movs	r3, #0
 802237e:	3401      	adds	r4, #1
 8022380:	9305      	str	r3, [sp, #20]
 8022382:	4619      	mov	r1, r3
 8022384:	f04f 0c0a 	mov.w	ip, #10
 8022388:	4620      	mov	r0, r4
 802238a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802238e:	3a30      	subs	r2, #48	; 0x30
 8022390:	2a09      	cmp	r2, #9
 8022392:	d903      	bls.n	802239c <_svfiprintf_r+0x1a8>
 8022394:	2b00      	cmp	r3, #0
 8022396:	d0c5      	beq.n	8022324 <_svfiprintf_r+0x130>
 8022398:	9105      	str	r1, [sp, #20]
 802239a:	e7c3      	b.n	8022324 <_svfiprintf_r+0x130>
 802239c:	fb0c 2101 	mla	r1, ip, r1, r2
 80223a0:	4604      	mov	r4, r0
 80223a2:	2301      	movs	r3, #1
 80223a4:	e7f0      	b.n	8022388 <_svfiprintf_r+0x194>
 80223a6:	ab03      	add	r3, sp, #12
 80223a8:	9300      	str	r3, [sp, #0]
 80223aa:	462a      	mov	r2, r5
 80223ac:	4b0f      	ldr	r3, [pc, #60]	; (80223ec <_svfiprintf_r+0x1f8>)
 80223ae:	a904      	add	r1, sp, #16
 80223b0:	4638      	mov	r0, r7
 80223b2:	f3af 8000 	nop.w
 80223b6:	1c42      	adds	r2, r0, #1
 80223b8:	4606      	mov	r6, r0
 80223ba:	d1d6      	bne.n	802236a <_svfiprintf_r+0x176>
 80223bc:	89ab      	ldrh	r3, [r5, #12]
 80223be:	065b      	lsls	r3, r3, #25
 80223c0:	f53f af2c 	bmi.w	802221c <_svfiprintf_r+0x28>
 80223c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80223c6:	b01d      	add	sp, #116	; 0x74
 80223c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223cc:	ab03      	add	r3, sp, #12
 80223ce:	9300      	str	r3, [sp, #0]
 80223d0:	462a      	mov	r2, r5
 80223d2:	4b06      	ldr	r3, [pc, #24]	; (80223ec <_svfiprintf_r+0x1f8>)
 80223d4:	a904      	add	r1, sp, #16
 80223d6:	4638      	mov	r0, r7
 80223d8:	f000 f87a 	bl	80224d0 <_printf_i>
 80223dc:	e7eb      	b.n	80223b6 <_svfiprintf_r+0x1c2>
 80223de:	bf00      	nop
 80223e0:	080229a0 	.word	0x080229a0
 80223e4:	080229aa 	.word	0x080229aa
 80223e8:	00000000 	.word	0x00000000
 80223ec:	0802213d 	.word	0x0802213d
 80223f0:	080229a6 	.word	0x080229a6

080223f4 <_printf_common>:
 80223f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80223f8:	4616      	mov	r6, r2
 80223fa:	4699      	mov	r9, r3
 80223fc:	688a      	ldr	r2, [r1, #8]
 80223fe:	690b      	ldr	r3, [r1, #16]
 8022400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022404:	4293      	cmp	r3, r2
 8022406:	bfb8      	it	lt
 8022408:	4613      	movlt	r3, r2
 802240a:	6033      	str	r3, [r6, #0]
 802240c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022410:	4607      	mov	r7, r0
 8022412:	460c      	mov	r4, r1
 8022414:	b10a      	cbz	r2, 802241a <_printf_common+0x26>
 8022416:	3301      	adds	r3, #1
 8022418:	6033      	str	r3, [r6, #0]
 802241a:	6823      	ldr	r3, [r4, #0]
 802241c:	0699      	lsls	r1, r3, #26
 802241e:	bf42      	ittt	mi
 8022420:	6833      	ldrmi	r3, [r6, #0]
 8022422:	3302      	addmi	r3, #2
 8022424:	6033      	strmi	r3, [r6, #0]
 8022426:	6825      	ldr	r5, [r4, #0]
 8022428:	f015 0506 	ands.w	r5, r5, #6
 802242c:	d106      	bne.n	802243c <_printf_common+0x48>
 802242e:	f104 0a19 	add.w	sl, r4, #25
 8022432:	68e3      	ldr	r3, [r4, #12]
 8022434:	6832      	ldr	r2, [r6, #0]
 8022436:	1a9b      	subs	r3, r3, r2
 8022438:	42ab      	cmp	r3, r5
 802243a:	dc26      	bgt.n	802248a <_printf_common+0x96>
 802243c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022440:	1e13      	subs	r3, r2, #0
 8022442:	6822      	ldr	r2, [r4, #0]
 8022444:	bf18      	it	ne
 8022446:	2301      	movne	r3, #1
 8022448:	0692      	lsls	r2, r2, #26
 802244a:	d42b      	bmi.n	80224a4 <_printf_common+0xb0>
 802244c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022450:	4649      	mov	r1, r9
 8022452:	4638      	mov	r0, r7
 8022454:	47c0      	blx	r8
 8022456:	3001      	adds	r0, #1
 8022458:	d01e      	beq.n	8022498 <_printf_common+0xa4>
 802245a:	6823      	ldr	r3, [r4, #0]
 802245c:	68e5      	ldr	r5, [r4, #12]
 802245e:	6832      	ldr	r2, [r6, #0]
 8022460:	f003 0306 	and.w	r3, r3, #6
 8022464:	2b04      	cmp	r3, #4
 8022466:	bf08      	it	eq
 8022468:	1aad      	subeq	r5, r5, r2
 802246a:	68a3      	ldr	r3, [r4, #8]
 802246c:	6922      	ldr	r2, [r4, #16]
 802246e:	bf0c      	ite	eq
 8022470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022474:	2500      	movne	r5, #0
 8022476:	4293      	cmp	r3, r2
 8022478:	bfc4      	itt	gt
 802247a:	1a9b      	subgt	r3, r3, r2
 802247c:	18ed      	addgt	r5, r5, r3
 802247e:	2600      	movs	r6, #0
 8022480:	341a      	adds	r4, #26
 8022482:	42b5      	cmp	r5, r6
 8022484:	d11a      	bne.n	80224bc <_printf_common+0xc8>
 8022486:	2000      	movs	r0, #0
 8022488:	e008      	b.n	802249c <_printf_common+0xa8>
 802248a:	2301      	movs	r3, #1
 802248c:	4652      	mov	r2, sl
 802248e:	4649      	mov	r1, r9
 8022490:	4638      	mov	r0, r7
 8022492:	47c0      	blx	r8
 8022494:	3001      	adds	r0, #1
 8022496:	d103      	bne.n	80224a0 <_printf_common+0xac>
 8022498:	f04f 30ff 	mov.w	r0, #4294967295
 802249c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224a0:	3501      	adds	r5, #1
 80224a2:	e7c6      	b.n	8022432 <_printf_common+0x3e>
 80224a4:	18e1      	adds	r1, r4, r3
 80224a6:	1c5a      	adds	r2, r3, #1
 80224a8:	2030      	movs	r0, #48	; 0x30
 80224aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80224ae:	4422      	add	r2, r4
 80224b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80224b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80224b8:	3302      	adds	r3, #2
 80224ba:	e7c7      	b.n	802244c <_printf_common+0x58>
 80224bc:	2301      	movs	r3, #1
 80224be:	4622      	mov	r2, r4
 80224c0:	4649      	mov	r1, r9
 80224c2:	4638      	mov	r0, r7
 80224c4:	47c0      	blx	r8
 80224c6:	3001      	adds	r0, #1
 80224c8:	d0e6      	beq.n	8022498 <_printf_common+0xa4>
 80224ca:	3601      	adds	r6, #1
 80224cc:	e7d9      	b.n	8022482 <_printf_common+0x8e>
	...

080224d0 <_printf_i>:
 80224d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80224d4:	460c      	mov	r4, r1
 80224d6:	4691      	mov	r9, r2
 80224d8:	7e27      	ldrb	r7, [r4, #24]
 80224da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80224dc:	2f78      	cmp	r7, #120	; 0x78
 80224de:	4680      	mov	r8, r0
 80224e0:	469a      	mov	sl, r3
 80224e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80224e6:	d807      	bhi.n	80224f8 <_printf_i+0x28>
 80224e8:	2f62      	cmp	r7, #98	; 0x62
 80224ea:	d80a      	bhi.n	8022502 <_printf_i+0x32>
 80224ec:	2f00      	cmp	r7, #0
 80224ee:	f000 80d8 	beq.w	80226a2 <_printf_i+0x1d2>
 80224f2:	2f58      	cmp	r7, #88	; 0x58
 80224f4:	f000 80a3 	beq.w	802263e <_printf_i+0x16e>
 80224f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80224fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022500:	e03a      	b.n	8022578 <_printf_i+0xa8>
 8022502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022506:	2b15      	cmp	r3, #21
 8022508:	d8f6      	bhi.n	80224f8 <_printf_i+0x28>
 802250a:	a001      	add	r0, pc, #4	; (adr r0, 8022510 <_printf_i+0x40>)
 802250c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8022510:	08022569 	.word	0x08022569
 8022514:	0802257d 	.word	0x0802257d
 8022518:	080224f9 	.word	0x080224f9
 802251c:	080224f9 	.word	0x080224f9
 8022520:	080224f9 	.word	0x080224f9
 8022524:	080224f9 	.word	0x080224f9
 8022528:	0802257d 	.word	0x0802257d
 802252c:	080224f9 	.word	0x080224f9
 8022530:	080224f9 	.word	0x080224f9
 8022534:	080224f9 	.word	0x080224f9
 8022538:	080224f9 	.word	0x080224f9
 802253c:	08022689 	.word	0x08022689
 8022540:	080225ad 	.word	0x080225ad
 8022544:	0802266b 	.word	0x0802266b
 8022548:	080224f9 	.word	0x080224f9
 802254c:	080224f9 	.word	0x080224f9
 8022550:	080226ab 	.word	0x080226ab
 8022554:	080224f9 	.word	0x080224f9
 8022558:	080225ad 	.word	0x080225ad
 802255c:	080224f9 	.word	0x080224f9
 8022560:	080224f9 	.word	0x080224f9
 8022564:	08022673 	.word	0x08022673
 8022568:	680b      	ldr	r3, [r1, #0]
 802256a:	1d1a      	adds	r2, r3, #4
 802256c:	681b      	ldr	r3, [r3, #0]
 802256e:	600a      	str	r2, [r1, #0]
 8022570:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022578:	2301      	movs	r3, #1
 802257a:	e0a3      	b.n	80226c4 <_printf_i+0x1f4>
 802257c:	6825      	ldr	r5, [r4, #0]
 802257e:	6808      	ldr	r0, [r1, #0]
 8022580:	062e      	lsls	r6, r5, #24
 8022582:	f100 0304 	add.w	r3, r0, #4
 8022586:	d50a      	bpl.n	802259e <_printf_i+0xce>
 8022588:	6805      	ldr	r5, [r0, #0]
 802258a:	600b      	str	r3, [r1, #0]
 802258c:	2d00      	cmp	r5, #0
 802258e:	da03      	bge.n	8022598 <_printf_i+0xc8>
 8022590:	232d      	movs	r3, #45	; 0x2d
 8022592:	426d      	negs	r5, r5
 8022594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022598:	485e      	ldr	r0, [pc, #376]	; (8022714 <_printf_i+0x244>)
 802259a:	230a      	movs	r3, #10
 802259c:	e019      	b.n	80225d2 <_printf_i+0x102>
 802259e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80225a2:	6805      	ldr	r5, [r0, #0]
 80225a4:	600b      	str	r3, [r1, #0]
 80225a6:	bf18      	it	ne
 80225a8:	b22d      	sxthne	r5, r5
 80225aa:	e7ef      	b.n	802258c <_printf_i+0xbc>
 80225ac:	680b      	ldr	r3, [r1, #0]
 80225ae:	6825      	ldr	r5, [r4, #0]
 80225b0:	1d18      	adds	r0, r3, #4
 80225b2:	6008      	str	r0, [r1, #0]
 80225b4:	0628      	lsls	r0, r5, #24
 80225b6:	d501      	bpl.n	80225bc <_printf_i+0xec>
 80225b8:	681d      	ldr	r5, [r3, #0]
 80225ba:	e002      	b.n	80225c2 <_printf_i+0xf2>
 80225bc:	0669      	lsls	r1, r5, #25
 80225be:	d5fb      	bpl.n	80225b8 <_printf_i+0xe8>
 80225c0:	881d      	ldrh	r5, [r3, #0]
 80225c2:	4854      	ldr	r0, [pc, #336]	; (8022714 <_printf_i+0x244>)
 80225c4:	2f6f      	cmp	r7, #111	; 0x6f
 80225c6:	bf0c      	ite	eq
 80225c8:	2308      	moveq	r3, #8
 80225ca:	230a      	movne	r3, #10
 80225cc:	2100      	movs	r1, #0
 80225ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80225d2:	6866      	ldr	r6, [r4, #4]
 80225d4:	60a6      	str	r6, [r4, #8]
 80225d6:	2e00      	cmp	r6, #0
 80225d8:	bfa2      	ittt	ge
 80225da:	6821      	ldrge	r1, [r4, #0]
 80225dc:	f021 0104 	bicge.w	r1, r1, #4
 80225e0:	6021      	strge	r1, [r4, #0]
 80225e2:	b90d      	cbnz	r5, 80225e8 <_printf_i+0x118>
 80225e4:	2e00      	cmp	r6, #0
 80225e6:	d04d      	beq.n	8022684 <_printf_i+0x1b4>
 80225e8:	4616      	mov	r6, r2
 80225ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80225ee:	fb03 5711 	mls	r7, r3, r1, r5
 80225f2:	5dc7      	ldrb	r7, [r0, r7]
 80225f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80225f8:	462f      	mov	r7, r5
 80225fa:	42bb      	cmp	r3, r7
 80225fc:	460d      	mov	r5, r1
 80225fe:	d9f4      	bls.n	80225ea <_printf_i+0x11a>
 8022600:	2b08      	cmp	r3, #8
 8022602:	d10b      	bne.n	802261c <_printf_i+0x14c>
 8022604:	6823      	ldr	r3, [r4, #0]
 8022606:	07df      	lsls	r7, r3, #31
 8022608:	d508      	bpl.n	802261c <_printf_i+0x14c>
 802260a:	6923      	ldr	r3, [r4, #16]
 802260c:	6861      	ldr	r1, [r4, #4]
 802260e:	4299      	cmp	r1, r3
 8022610:	bfde      	ittt	le
 8022612:	2330      	movle	r3, #48	; 0x30
 8022614:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022618:	f106 36ff 	addle.w	r6, r6, #4294967295
 802261c:	1b92      	subs	r2, r2, r6
 802261e:	6122      	str	r2, [r4, #16]
 8022620:	f8cd a000 	str.w	sl, [sp]
 8022624:	464b      	mov	r3, r9
 8022626:	aa03      	add	r2, sp, #12
 8022628:	4621      	mov	r1, r4
 802262a:	4640      	mov	r0, r8
 802262c:	f7ff fee2 	bl	80223f4 <_printf_common>
 8022630:	3001      	adds	r0, #1
 8022632:	d14c      	bne.n	80226ce <_printf_i+0x1fe>
 8022634:	f04f 30ff 	mov.w	r0, #4294967295
 8022638:	b004      	add	sp, #16
 802263a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802263e:	4835      	ldr	r0, [pc, #212]	; (8022714 <_printf_i+0x244>)
 8022640:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022644:	6823      	ldr	r3, [r4, #0]
 8022646:	680e      	ldr	r6, [r1, #0]
 8022648:	061f      	lsls	r7, r3, #24
 802264a:	f856 5b04 	ldr.w	r5, [r6], #4
 802264e:	600e      	str	r6, [r1, #0]
 8022650:	d514      	bpl.n	802267c <_printf_i+0x1ac>
 8022652:	07d9      	lsls	r1, r3, #31
 8022654:	bf44      	itt	mi
 8022656:	f043 0320 	orrmi.w	r3, r3, #32
 802265a:	6023      	strmi	r3, [r4, #0]
 802265c:	b91d      	cbnz	r5, 8022666 <_printf_i+0x196>
 802265e:	6823      	ldr	r3, [r4, #0]
 8022660:	f023 0320 	bic.w	r3, r3, #32
 8022664:	6023      	str	r3, [r4, #0]
 8022666:	2310      	movs	r3, #16
 8022668:	e7b0      	b.n	80225cc <_printf_i+0xfc>
 802266a:	6823      	ldr	r3, [r4, #0]
 802266c:	f043 0320 	orr.w	r3, r3, #32
 8022670:	6023      	str	r3, [r4, #0]
 8022672:	2378      	movs	r3, #120	; 0x78
 8022674:	4828      	ldr	r0, [pc, #160]	; (8022718 <_printf_i+0x248>)
 8022676:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802267a:	e7e3      	b.n	8022644 <_printf_i+0x174>
 802267c:	065e      	lsls	r6, r3, #25
 802267e:	bf48      	it	mi
 8022680:	b2ad      	uxthmi	r5, r5
 8022682:	e7e6      	b.n	8022652 <_printf_i+0x182>
 8022684:	4616      	mov	r6, r2
 8022686:	e7bb      	b.n	8022600 <_printf_i+0x130>
 8022688:	680b      	ldr	r3, [r1, #0]
 802268a:	6826      	ldr	r6, [r4, #0]
 802268c:	6960      	ldr	r0, [r4, #20]
 802268e:	1d1d      	adds	r5, r3, #4
 8022690:	600d      	str	r5, [r1, #0]
 8022692:	0635      	lsls	r5, r6, #24
 8022694:	681b      	ldr	r3, [r3, #0]
 8022696:	d501      	bpl.n	802269c <_printf_i+0x1cc>
 8022698:	6018      	str	r0, [r3, #0]
 802269a:	e002      	b.n	80226a2 <_printf_i+0x1d2>
 802269c:	0671      	lsls	r1, r6, #25
 802269e:	d5fb      	bpl.n	8022698 <_printf_i+0x1c8>
 80226a0:	8018      	strh	r0, [r3, #0]
 80226a2:	2300      	movs	r3, #0
 80226a4:	6123      	str	r3, [r4, #16]
 80226a6:	4616      	mov	r6, r2
 80226a8:	e7ba      	b.n	8022620 <_printf_i+0x150>
 80226aa:	680b      	ldr	r3, [r1, #0]
 80226ac:	1d1a      	adds	r2, r3, #4
 80226ae:	600a      	str	r2, [r1, #0]
 80226b0:	681e      	ldr	r6, [r3, #0]
 80226b2:	6862      	ldr	r2, [r4, #4]
 80226b4:	2100      	movs	r1, #0
 80226b6:	4630      	mov	r0, r6
 80226b8:	f7fd fdb2 	bl	8020220 <memchr>
 80226bc:	b108      	cbz	r0, 80226c2 <_printf_i+0x1f2>
 80226be:	1b80      	subs	r0, r0, r6
 80226c0:	6060      	str	r0, [r4, #4]
 80226c2:	6863      	ldr	r3, [r4, #4]
 80226c4:	6123      	str	r3, [r4, #16]
 80226c6:	2300      	movs	r3, #0
 80226c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80226cc:	e7a8      	b.n	8022620 <_printf_i+0x150>
 80226ce:	6923      	ldr	r3, [r4, #16]
 80226d0:	4632      	mov	r2, r6
 80226d2:	4649      	mov	r1, r9
 80226d4:	4640      	mov	r0, r8
 80226d6:	47d0      	blx	sl
 80226d8:	3001      	adds	r0, #1
 80226da:	d0ab      	beq.n	8022634 <_printf_i+0x164>
 80226dc:	6823      	ldr	r3, [r4, #0]
 80226de:	079b      	lsls	r3, r3, #30
 80226e0:	d413      	bmi.n	802270a <_printf_i+0x23a>
 80226e2:	68e0      	ldr	r0, [r4, #12]
 80226e4:	9b03      	ldr	r3, [sp, #12]
 80226e6:	4298      	cmp	r0, r3
 80226e8:	bfb8      	it	lt
 80226ea:	4618      	movlt	r0, r3
 80226ec:	e7a4      	b.n	8022638 <_printf_i+0x168>
 80226ee:	2301      	movs	r3, #1
 80226f0:	4632      	mov	r2, r6
 80226f2:	4649      	mov	r1, r9
 80226f4:	4640      	mov	r0, r8
 80226f6:	47d0      	blx	sl
 80226f8:	3001      	adds	r0, #1
 80226fa:	d09b      	beq.n	8022634 <_printf_i+0x164>
 80226fc:	3501      	adds	r5, #1
 80226fe:	68e3      	ldr	r3, [r4, #12]
 8022700:	9903      	ldr	r1, [sp, #12]
 8022702:	1a5b      	subs	r3, r3, r1
 8022704:	42ab      	cmp	r3, r5
 8022706:	dcf2      	bgt.n	80226ee <_printf_i+0x21e>
 8022708:	e7eb      	b.n	80226e2 <_printf_i+0x212>
 802270a:	2500      	movs	r5, #0
 802270c:	f104 0619 	add.w	r6, r4, #25
 8022710:	e7f5      	b.n	80226fe <_printf_i+0x22e>
 8022712:	bf00      	nop
 8022714:	080229b1 	.word	0x080229b1
 8022718:	080229c2 	.word	0x080229c2

0802271c <memcpy>:
 802271c:	440a      	add	r2, r1
 802271e:	4291      	cmp	r1, r2
 8022720:	f100 33ff 	add.w	r3, r0, #4294967295
 8022724:	d100      	bne.n	8022728 <memcpy+0xc>
 8022726:	4770      	bx	lr
 8022728:	b510      	push	{r4, lr}
 802272a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802272e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022732:	4291      	cmp	r1, r2
 8022734:	d1f9      	bne.n	802272a <memcpy+0xe>
 8022736:	bd10      	pop	{r4, pc}

08022738 <memmove>:
 8022738:	4288      	cmp	r0, r1
 802273a:	b510      	push	{r4, lr}
 802273c:	eb01 0402 	add.w	r4, r1, r2
 8022740:	d902      	bls.n	8022748 <memmove+0x10>
 8022742:	4284      	cmp	r4, r0
 8022744:	4623      	mov	r3, r4
 8022746:	d807      	bhi.n	8022758 <memmove+0x20>
 8022748:	1e43      	subs	r3, r0, #1
 802274a:	42a1      	cmp	r1, r4
 802274c:	d008      	beq.n	8022760 <memmove+0x28>
 802274e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022756:	e7f8      	b.n	802274a <memmove+0x12>
 8022758:	4402      	add	r2, r0
 802275a:	4601      	mov	r1, r0
 802275c:	428a      	cmp	r2, r1
 802275e:	d100      	bne.n	8022762 <memmove+0x2a>
 8022760:	bd10      	pop	{r4, pc}
 8022762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802276a:	e7f7      	b.n	802275c <memmove+0x24>

0802276c <_free_r>:
 802276c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802276e:	2900      	cmp	r1, #0
 8022770:	d048      	beq.n	8022804 <_free_r+0x98>
 8022772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022776:	9001      	str	r0, [sp, #4]
 8022778:	2b00      	cmp	r3, #0
 802277a:	f1a1 0404 	sub.w	r4, r1, #4
 802277e:	bfb8      	it	lt
 8022780:	18e4      	addlt	r4, r4, r3
 8022782:	f000 f8d3 	bl	802292c <__malloc_lock>
 8022786:	4a20      	ldr	r2, [pc, #128]	; (8022808 <_free_r+0x9c>)
 8022788:	9801      	ldr	r0, [sp, #4]
 802278a:	6813      	ldr	r3, [r2, #0]
 802278c:	4615      	mov	r5, r2
 802278e:	b933      	cbnz	r3, 802279e <_free_r+0x32>
 8022790:	6063      	str	r3, [r4, #4]
 8022792:	6014      	str	r4, [r2, #0]
 8022794:	b003      	add	sp, #12
 8022796:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802279a:	f000 b8cd 	b.w	8022938 <__malloc_unlock>
 802279e:	42a3      	cmp	r3, r4
 80227a0:	d90b      	bls.n	80227ba <_free_r+0x4e>
 80227a2:	6821      	ldr	r1, [r4, #0]
 80227a4:	1862      	adds	r2, r4, r1
 80227a6:	4293      	cmp	r3, r2
 80227a8:	bf04      	itt	eq
 80227aa:	681a      	ldreq	r2, [r3, #0]
 80227ac:	685b      	ldreq	r3, [r3, #4]
 80227ae:	6063      	str	r3, [r4, #4]
 80227b0:	bf04      	itt	eq
 80227b2:	1852      	addeq	r2, r2, r1
 80227b4:	6022      	streq	r2, [r4, #0]
 80227b6:	602c      	str	r4, [r5, #0]
 80227b8:	e7ec      	b.n	8022794 <_free_r+0x28>
 80227ba:	461a      	mov	r2, r3
 80227bc:	685b      	ldr	r3, [r3, #4]
 80227be:	b10b      	cbz	r3, 80227c4 <_free_r+0x58>
 80227c0:	42a3      	cmp	r3, r4
 80227c2:	d9fa      	bls.n	80227ba <_free_r+0x4e>
 80227c4:	6811      	ldr	r1, [r2, #0]
 80227c6:	1855      	adds	r5, r2, r1
 80227c8:	42a5      	cmp	r5, r4
 80227ca:	d10b      	bne.n	80227e4 <_free_r+0x78>
 80227cc:	6824      	ldr	r4, [r4, #0]
 80227ce:	4421      	add	r1, r4
 80227d0:	1854      	adds	r4, r2, r1
 80227d2:	42a3      	cmp	r3, r4
 80227d4:	6011      	str	r1, [r2, #0]
 80227d6:	d1dd      	bne.n	8022794 <_free_r+0x28>
 80227d8:	681c      	ldr	r4, [r3, #0]
 80227da:	685b      	ldr	r3, [r3, #4]
 80227dc:	6053      	str	r3, [r2, #4]
 80227de:	4421      	add	r1, r4
 80227e0:	6011      	str	r1, [r2, #0]
 80227e2:	e7d7      	b.n	8022794 <_free_r+0x28>
 80227e4:	d902      	bls.n	80227ec <_free_r+0x80>
 80227e6:	230c      	movs	r3, #12
 80227e8:	6003      	str	r3, [r0, #0]
 80227ea:	e7d3      	b.n	8022794 <_free_r+0x28>
 80227ec:	6825      	ldr	r5, [r4, #0]
 80227ee:	1961      	adds	r1, r4, r5
 80227f0:	428b      	cmp	r3, r1
 80227f2:	bf04      	itt	eq
 80227f4:	6819      	ldreq	r1, [r3, #0]
 80227f6:	685b      	ldreq	r3, [r3, #4]
 80227f8:	6063      	str	r3, [r4, #4]
 80227fa:	bf04      	itt	eq
 80227fc:	1949      	addeq	r1, r1, r5
 80227fe:	6021      	streq	r1, [r4, #0]
 8022800:	6054      	str	r4, [r2, #4]
 8022802:	e7c7      	b.n	8022794 <_free_r+0x28>
 8022804:	b003      	add	sp, #12
 8022806:	bd30      	pop	{r4, r5, pc}
 8022808:	20000090 	.word	0x20000090

0802280c <_malloc_r>:
 802280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802280e:	1ccd      	adds	r5, r1, #3
 8022810:	f025 0503 	bic.w	r5, r5, #3
 8022814:	3508      	adds	r5, #8
 8022816:	2d0c      	cmp	r5, #12
 8022818:	bf38      	it	cc
 802281a:	250c      	movcc	r5, #12
 802281c:	2d00      	cmp	r5, #0
 802281e:	4606      	mov	r6, r0
 8022820:	db01      	blt.n	8022826 <_malloc_r+0x1a>
 8022822:	42a9      	cmp	r1, r5
 8022824:	d903      	bls.n	802282e <_malloc_r+0x22>
 8022826:	230c      	movs	r3, #12
 8022828:	6033      	str	r3, [r6, #0]
 802282a:	2000      	movs	r0, #0
 802282c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802282e:	f000 f87d 	bl	802292c <__malloc_lock>
 8022832:	4921      	ldr	r1, [pc, #132]	; (80228b8 <_malloc_r+0xac>)
 8022834:	680a      	ldr	r2, [r1, #0]
 8022836:	4614      	mov	r4, r2
 8022838:	b99c      	cbnz	r4, 8022862 <_malloc_r+0x56>
 802283a:	4f20      	ldr	r7, [pc, #128]	; (80228bc <_malloc_r+0xb0>)
 802283c:	683b      	ldr	r3, [r7, #0]
 802283e:	b923      	cbnz	r3, 802284a <_malloc_r+0x3e>
 8022840:	4621      	mov	r1, r4
 8022842:	4630      	mov	r0, r6
 8022844:	f000 f862 	bl	802290c <_sbrk_r>
 8022848:	6038      	str	r0, [r7, #0]
 802284a:	4629      	mov	r1, r5
 802284c:	4630      	mov	r0, r6
 802284e:	f000 f85d 	bl	802290c <_sbrk_r>
 8022852:	1c43      	adds	r3, r0, #1
 8022854:	d123      	bne.n	802289e <_malloc_r+0x92>
 8022856:	230c      	movs	r3, #12
 8022858:	6033      	str	r3, [r6, #0]
 802285a:	4630      	mov	r0, r6
 802285c:	f000 f86c 	bl	8022938 <__malloc_unlock>
 8022860:	e7e3      	b.n	802282a <_malloc_r+0x1e>
 8022862:	6823      	ldr	r3, [r4, #0]
 8022864:	1b5b      	subs	r3, r3, r5
 8022866:	d417      	bmi.n	8022898 <_malloc_r+0x8c>
 8022868:	2b0b      	cmp	r3, #11
 802286a:	d903      	bls.n	8022874 <_malloc_r+0x68>
 802286c:	6023      	str	r3, [r4, #0]
 802286e:	441c      	add	r4, r3
 8022870:	6025      	str	r5, [r4, #0]
 8022872:	e004      	b.n	802287e <_malloc_r+0x72>
 8022874:	6863      	ldr	r3, [r4, #4]
 8022876:	42a2      	cmp	r2, r4
 8022878:	bf0c      	ite	eq
 802287a:	600b      	streq	r3, [r1, #0]
 802287c:	6053      	strne	r3, [r2, #4]
 802287e:	4630      	mov	r0, r6
 8022880:	f000 f85a 	bl	8022938 <__malloc_unlock>
 8022884:	f104 000b 	add.w	r0, r4, #11
 8022888:	1d23      	adds	r3, r4, #4
 802288a:	f020 0007 	bic.w	r0, r0, #7
 802288e:	1ac2      	subs	r2, r0, r3
 8022890:	d0cc      	beq.n	802282c <_malloc_r+0x20>
 8022892:	1a1b      	subs	r3, r3, r0
 8022894:	50a3      	str	r3, [r4, r2]
 8022896:	e7c9      	b.n	802282c <_malloc_r+0x20>
 8022898:	4622      	mov	r2, r4
 802289a:	6864      	ldr	r4, [r4, #4]
 802289c:	e7cc      	b.n	8022838 <_malloc_r+0x2c>
 802289e:	1cc4      	adds	r4, r0, #3
 80228a0:	f024 0403 	bic.w	r4, r4, #3
 80228a4:	42a0      	cmp	r0, r4
 80228a6:	d0e3      	beq.n	8022870 <_malloc_r+0x64>
 80228a8:	1a21      	subs	r1, r4, r0
 80228aa:	4630      	mov	r0, r6
 80228ac:	f000 f82e 	bl	802290c <_sbrk_r>
 80228b0:	3001      	adds	r0, #1
 80228b2:	d1dd      	bne.n	8022870 <_malloc_r+0x64>
 80228b4:	e7cf      	b.n	8022856 <_malloc_r+0x4a>
 80228b6:	bf00      	nop
 80228b8:	20000090 	.word	0x20000090
 80228bc:	20000094 	.word	0x20000094

080228c0 <_realloc_r>:
 80228c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80228c2:	4607      	mov	r7, r0
 80228c4:	4614      	mov	r4, r2
 80228c6:	460e      	mov	r6, r1
 80228c8:	b921      	cbnz	r1, 80228d4 <_realloc_r+0x14>
 80228ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80228ce:	4611      	mov	r1, r2
 80228d0:	f7ff bf9c 	b.w	802280c <_malloc_r>
 80228d4:	b922      	cbnz	r2, 80228e0 <_realloc_r+0x20>
 80228d6:	f7ff ff49 	bl	802276c <_free_r>
 80228da:	4625      	mov	r5, r4
 80228dc:	4628      	mov	r0, r5
 80228de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80228e0:	f000 f830 	bl	8022944 <_malloc_usable_size_r>
 80228e4:	42a0      	cmp	r0, r4
 80228e6:	d20f      	bcs.n	8022908 <_realloc_r+0x48>
 80228e8:	4621      	mov	r1, r4
 80228ea:	4638      	mov	r0, r7
 80228ec:	f7ff ff8e 	bl	802280c <_malloc_r>
 80228f0:	4605      	mov	r5, r0
 80228f2:	2800      	cmp	r0, #0
 80228f4:	d0f2      	beq.n	80228dc <_realloc_r+0x1c>
 80228f6:	4631      	mov	r1, r6
 80228f8:	4622      	mov	r2, r4
 80228fa:	f7ff ff0f 	bl	802271c <memcpy>
 80228fe:	4631      	mov	r1, r6
 8022900:	4638      	mov	r0, r7
 8022902:	f7ff ff33 	bl	802276c <_free_r>
 8022906:	e7e9      	b.n	80228dc <_realloc_r+0x1c>
 8022908:	4635      	mov	r5, r6
 802290a:	e7e7      	b.n	80228dc <_realloc_r+0x1c>

0802290c <_sbrk_r>:
 802290c:	b538      	push	{r3, r4, r5, lr}
 802290e:	4d06      	ldr	r5, [pc, #24]	; (8022928 <_sbrk_r+0x1c>)
 8022910:	2300      	movs	r3, #0
 8022912:	4604      	mov	r4, r0
 8022914:	4608      	mov	r0, r1
 8022916:	602b      	str	r3, [r5, #0]
 8022918:	f7fd ff68 	bl	80207ec <_sbrk>
 802291c:	1c43      	adds	r3, r0, #1
 802291e:	d102      	bne.n	8022926 <_sbrk_r+0x1a>
 8022920:	682b      	ldr	r3, [r5, #0]
 8022922:	b103      	cbz	r3, 8022926 <_sbrk_r+0x1a>
 8022924:	6023      	str	r3, [r4, #0]
 8022926:	bd38      	pop	{r3, r4, r5, pc}
 8022928:	200000e0 	.word	0x200000e0

0802292c <__malloc_lock>:
 802292c:	4801      	ldr	r0, [pc, #4]	; (8022934 <__malloc_lock+0x8>)
 802292e:	f000 b811 	b.w	8022954 <__retarget_lock_acquire_recursive>
 8022932:	bf00      	nop
 8022934:	200000e8 	.word	0x200000e8

08022938 <__malloc_unlock>:
 8022938:	4801      	ldr	r0, [pc, #4]	; (8022940 <__malloc_unlock+0x8>)
 802293a:	f000 b80c 	b.w	8022956 <__retarget_lock_release_recursive>
 802293e:	bf00      	nop
 8022940:	200000e8 	.word	0x200000e8

08022944 <_malloc_usable_size_r>:
 8022944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022948:	1f18      	subs	r0, r3, #4
 802294a:	2b00      	cmp	r3, #0
 802294c:	bfbc      	itt	lt
 802294e:	580b      	ldrlt	r3, [r1, r0]
 8022950:	18c0      	addlt	r0, r0, r3
 8022952:	4770      	bx	lr

08022954 <__retarget_lock_acquire_recursive>:
 8022954:	4770      	bx	lr

08022956 <__retarget_lock_release_recursive>:
 8022956:	4770      	bx	lr

08022958 <_init>:
 8022958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802295a:	bf00      	nop
 802295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802295e:	bc08      	pop	{r3}
 8022960:	469e      	mov	lr, r3
 8022962:	4770      	bx	lr

08022964 <_fini>:
 8022964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022966:	bf00      	nop
 8022968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802296a:	bc08      	pop	{r3}
 802296c:	469e      	mov	lr, r3
 802296e:	4770      	bx	lr
